
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Vehicles
 * 
 */
export type Vehicles = $Result.DefaultSelection<Prisma.$VehiclesPayload>
/**
 * Model Jobcard
 * 
 */
export type Jobcard = $Result.DefaultSelection<Prisma.$JobcardPayload>
/**
 * Model Joblines
 * 
 */
export type Joblines = $Result.DefaultSelection<Prisma.$JoblinesPayload>
/**
 * Model AllocatedJobs
 * 
 */
export type AllocatedJobs = $Result.DefaultSelection<Prisma.$AllocatedJobsPayload>
/**
 * Model Comments
 * 
 */
export type Comments = $Result.DefaultSelection<Prisma.$CommentsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  MANAGER: 'MANAGER',
  RECEPTION: 'RECEPTION',
  TECHNICIAN: 'TECHNICIAN',
  SUPERUSER: 'SUPERUSER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const CommentType: {
  INFORMATION: 'INFORMATION',
  COMPLAINT: 'COMPLAINT',
  CAUSE: 'CAUSE',
  CURE: 'CURE'
};

export type CommentType = (typeof CommentType)[keyof typeof CommentType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type CommentType = $Enums.CommentType

export const CommentType: typeof $Enums.CommentType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Employees
 * const employees = await prisma.employee.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Employees
   * const employees = await prisma.employee.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs>;

  /**
   * `prisma.vehicles`: Exposes CRUD operations for the **Vehicles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vehicles
    * const vehicles = await prisma.vehicles.findMany()
    * ```
    */
  get vehicles(): Prisma.VehiclesDelegate<ExtArgs>;

  /**
   * `prisma.jobcard`: Exposes CRUD operations for the **Jobcard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobcards
    * const jobcards = await prisma.jobcard.findMany()
    * ```
    */
  get jobcard(): Prisma.JobcardDelegate<ExtArgs>;

  /**
   * `prisma.joblines`: Exposes CRUD operations for the **Joblines** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Joblines
    * const joblines = await prisma.joblines.findMany()
    * ```
    */
  get joblines(): Prisma.JoblinesDelegate<ExtArgs>;

  /**
   * `prisma.allocatedJobs`: Exposes CRUD operations for the **AllocatedJobs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AllocatedJobs
    * const allocatedJobs = await prisma.allocatedJobs.findMany()
    * ```
    */
  get allocatedJobs(): Prisma.AllocatedJobsDelegate<ExtArgs>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **Comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.CommentsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Employee: 'Employee',
    Customer: 'Customer',
    Vehicles: 'Vehicles',
    Jobcard: 'Jobcard',
    Joblines: 'Joblines',
    AllocatedJobs: 'AllocatedJobs',
    Comments: 'Comments'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "employee" | "customer" | "vehicles" | "jobcard" | "joblines" | "allocatedJobs" | "comments"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Vehicles: {
        payload: Prisma.$VehiclesPayload<ExtArgs>
        fields: Prisma.VehiclesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VehiclesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VehiclesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload>
          }
          findFirst: {
            args: Prisma.VehiclesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VehiclesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload>
          }
          findMany: {
            args: Prisma.VehiclesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload>[]
          }
          create: {
            args: Prisma.VehiclesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload>
          }
          createMany: {
            args: Prisma.VehiclesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VehiclesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload>[]
          }
          delete: {
            args: Prisma.VehiclesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload>
          }
          update: {
            args: Prisma.VehiclesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload>
          }
          deleteMany: {
            args: Prisma.VehiclesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VehiclesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VehiclesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclesPayload>
          }
          aggregate: {
            args: Prisma.VehiclesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVehicles>
          }
          groupBy: {
            args: Prisma.VehiclesGroupByArgs<ExtArgs>
            result: $Utils.Optional<VehiclesGroupByOutputType>[]
          }
          count: {
            args: Prisma.VehiclesCountArgs<ExtArgs>
            result: $Utils.Optional<VehiclesCountAggregateOutputType> | number
          }
        }
      }
      Jobcard: {
        payload: Prisma.$JobcardPayload<ExtArgs>
        fields: Prisma.JobcardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobcardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobcardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload>
          }
          findFirst: {
            args: Prisma.JobcardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobcardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload>
          }
          findMany: {
            args: Prisma.JobcardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload>[]
          }
          create: {
            args: Prisma.JobcardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload>
          }
          createMany: {
            args: Prisma.JobcardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobcardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload>[]
          }
          delete: {
            args: Prisma.JobcardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload>
          }
          update: {
            args: Prisma.JobcardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload>
          }
          deleteMany: {
            args: Prisma.JobcardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobcardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobcardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobcardPayload>
          }
          aggregate: {
            args: Prisma.JobcardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobcard>
          }
          groupBy: {
            args: Prisma.JobcardGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobcardGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobcardCountArgs<ExtArgs>
            result: $Utils.Optional<JobcardCountAggregateOutputType> | number
          }
        }
      }
      Joblines: {
        payload: Prisma.$JoblinesPayload<ExtArgs>
        fields: Prisma.JoblinesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JoblinesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JoblinesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload>
          }
          findFirst: {
            args: Prisma.JoblinesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JoblinesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload>
          }
          findMany: {
            args: Prisma.JoblinesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload>[]
          }
          create: {
            args: Prisma.JoblinesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload>
          }
          createMany: {
            args: Prisma.JoblinesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JoblinesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload>[]
          }
          delete: {
            args: Prisma.JoblinesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload>
          }
          update: {
            args: Prisma.JoblinesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload>
          }
          deleteMany: {
            args: Prisma.JoblinesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JoblinesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JoblinesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JoblinesPayload>
          }
          aggregate: {
            args: Prisma.JoblinesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJoblines>
          }
          groupBy: {
            args: Prisma.JoblinesGroupByArgs<ExtArgs>
            result: $Utils.Optional<JoblinesGroupByOutputType>[]
          }
          count: {
            args: Prisma.JoblinesCountArgs<ExtArgs>
            result: $Utils.Optional<JoblinesCountAggregateOutputType> | number
          }
        }
      }
      AllocatedJobs: {
        payload: Prisma.$AllocatedJobsPayload<ExtArgs>
        fields: Prisma.AllocatedJobsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllocatedJobsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllocatedJobsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload>
          }
          findFirst: {
            args: Prisma.AllocatedJobsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllocatedJobsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload>
          }
          findMany: {
            args: Prisma.AllocatedJobsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload>[]
          }
          create: {
            args: Prisma.AllocatedJobsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload>
          }
          createMany: {
            args: Prisma.AllocatedJobsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AllocatedJobsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload>[]
          }
          delete: {
            args: Prisma.AllocatedJobsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload>
          }
          update: {
            args: Prisma.AllocatedJobsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload>
          }
          deleteMany: {
            args: Prisma.AllocatedJobsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AllocatedJobsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AllocatedJobsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocatedJobsPayload>
          }
          aggregate: {
            args: Prisma.AllocatedJobsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAllocatedJobs>
          }
          groupBy: {
            args: Prisma.AllocatedJobsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllocatedJobsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AllocatedJobsCountArgs<ExtArgs>
            result: $Utils.Optional<AllocatedJobsCountAggregateOutputType> | number
          }
        }
      }
      Comments: {
        payload: Prisma.$CommentsPayload<ExtArgs>
        fields: Prisma.CommentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          findFirst: {
            args: Prisma.CommentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          findMany: {
            args: Prisma.CommentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>[]
          }
          create: {
            args: Prisma.CommentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          createMany: {
            args: Prisma.CommentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>[]
          }
          delete: {
            args: Prisma.CommentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          update: {
            args: Prisma.CommentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          deleteMany: {
            args: Prisma.CommentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          aggregate: {
            args: Prisma.CommentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComments>
          }
          groupBy: {
            args: Prisma.CommentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentsCountArgs<ExtArgs>
            result: $Utils.Optional<CommentsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    allocated_jobs: number
    comments: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allocated_jobs?: boolean | EmployeeCountOutputTypeCountAllocated_jobsArgs
    comments?: boolean | EmployeeCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountAllocated_jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocatedJobsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    using_vehicles: number
    owned_vehicles: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    using_vehicles?: boolean | CustomerCountOutputTypeCountUsing_vehiclesArgs
    owned_vehicles?: boolean | CustomerCountOutputTypeCountOwned_vehiclesArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountUsing_vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehiclesWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountOwned_vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehiclesWhereInput
  }


  /**
   * Count Type VehiclesCountOutputType
   */

  export type VehiclesCountOutputType = {
    Jobcard: number
  }

  export type VehiclesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Jobcard?: boolean | VehiclesCountOutputTypeCountJobcardArgs
  }

  // Custom InputTypes
  /**
   * VehiclesCountOutputType without action
   */
  export type VehiclesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehiclesCountOutputType
     */
    select?: VehiclesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VehiclesCountOutputType without action
   */
  export type VehiclesCountOutputTypeCountJobcardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobcardWhereInput
  }


  /**
   * Count Type JobcardCountOutputType
   */

  export type JobcardCountOutputType = {
    joblines: number
    allocated_jobs: number
  }

  export type JobcardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joblines?: boolean | JobcardCountOutputTypeCountJoblinesArgs
    allocated_jobs?: boolean | JobcardCountOutputTypeCountAllocated_jobsArgs
  }

  // Custom InputTypes
  /**
   * JobcardCountOutputType without action
   */
  export type JobcardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobcardCountOutputType
     */
    select?: JobcardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobcardCountOutputType without action
   */
  export type JobcardCountOutputTypeCountJoblinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoblinesWhereInput
  }

  /**
   * JobcardCountOutputType without action
   */
  export type JobcardCountOutputTypeCountAllocated_jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocatedJobsWhereInput
  }


  /**
   * Count Type JoblinesCountOutputType
   */

  export type JoblinesCountOutputType = {
    comments: number
  }

  export type JoblinesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | JoblinesCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * JoblinesCountOutputType without action
   */
  export type JoblinesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoblinesCountOutputType
     */
    select?: JoblinesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JoblinesCountOutputType without action
   */
  export type JoblinesCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    name: string | null
    role: $Enums.Role | null
    active: boolean | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    role: $Enums.Role | null
    active: boolean | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    name: number
    role: number
    active: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    name?: true
    role?: true
    active?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    name?: true
    role?: true
    active?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    name?: true
    role?: true
    active?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: number
    name: string
    role: $Enums.Role
    active: boolean
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    active?: boolean
    allocated_jobs?: boolean | Employee$allocated_jobsArgs<ExtArgs>
    comments?: boolean | Employee$commentsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    active?: boolean
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    name?: boolean
    role?: boolean
    active?: boolean
  }

  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allocated_jobs?: boolean | Employee$allocated_jobsArgs<ExtArgs>
    comments?: boolean | Employee$commentsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      allocated_jobs: Prisma.$AllocatedJobsPayload<ExtArgs>[]
      comments: Prisma.$CommentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      role: $Enums.Role
      active: boolean
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    allocated_jobs<T extends Employee$allocated_jobsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$allocated_jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Employee$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */ 
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'Int'>
    readonly name: FieldRef<"Employee", 'String'>
    readonly role: FieldRef<"Employee", 'Role'>
    readonly active: FieldRef<"Employee", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee.allocated_jobs
   */
  export type Employee$allocated_jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    where?: AllocatedJobsWhereInput
    orderBy?: AllocatedJobsOrderByWithRelationInput | AllocatedJobsOrderByWithRelationInput[]
    cursor?: AllocatedJobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllocatedJobsScalarFieldEnum | AllocatedJobsScalarFieldEnum[]
  }

  /**
   * Employee.comments
   */
  export type Employee$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    name: string | null
    contact_name: string | null
    contact_number: string | null
    contact_email: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    contact_name: string | null
    contact_number: string | null
    contact_email: string | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    contact_name: number
    contact_number: number
    contact_email: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    contact_name?: true
    contact_number?: true
    contact_email?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    contact_name?: true
    contact_number?: true
    contact_email?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    contact_name?: true
    contact_number?: true
    contact_email?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: number
    name: string
    contact_name: string
    contact_number: string
    contact_email: string
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact_name?: boolean
    contact_number?: boolean
    contact_email?: boolean
    using_vehicles?: boolean | Customer$using_vehiclesArgs<ExtArgs>
    owned_vehicles?: boolean | Customer$owned_vehiclesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact_name?: boolean
    contact_number?: boolean
    contact_email?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
    contact_name?: boolean
    contact_number?: boolean
    contact_email?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    using_vehicles?: boolean | Customer$using_vehiclesArgs<ExtArgs>
    owned_vehicles?: boolean | Customer$owned_vehiclesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      using_vehicles: Prisma.$VehiclesPayload<ExtArgs>[]
      owned_vehicles: Prisma.$VehiclesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      contact_name: string
      contact_number: string
      contact_email: string
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    using_vehicles<T extends Customer$using_vehiclesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$using_vehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "findMany"> | Null>
    owned_vehicles<T extends Customer$owned_vehiclesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$owned_vehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'Int'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly contact_name: FieldRef<"Customer", 'String'>
    readonly contact_number: FieldRef<"Customer", 'String'>
    readonly contact_email: FieldRef<"Customer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer.using_vehicles
   */
  export type Customer$using_vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    where?: VehiclesWhereInput
    orderBy?: VehiclesOrderByWithRelationInput | VehiclesOrderByWithRelationInput[]
    cursor?: VehiclesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehiclesScalarFieldEnum | VehiclesScalarFieldEnum[]
  }

  /**
   * Customer.owned_vehicles
   */
  export type Customer$owned_vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    where?: VehiclesWhereInput
    orderBy?: VehiclesOrderByWithRelationInput | VehiclesOrderByWithRelationInput[]
    cursor?: VehiclesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehiclesScalarFieldEnum | VehiclesScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Vehicles
   */

  export type AggregateVehicles = {
    _count: VehiclesCountAggregateOutputType | null
    _avg: VehiclesAvgAggregateOutputType | null
    _sum: VehiclesSumAggregateOutputType | null
    _min: VehiclesMinAggregateOutputType | null
    _max: VehiclesMaxAggregateOutputType | null
  }

  export type VehiclesAvgAggregateOutputType = {
    id: number | null
    using_customer_id: number | null
    owning_customer_id: number | null
  }

  export type VehiclesSumAggregateOutputType = {
    id: number | null
    using_customer_id: number | null
    owning_customer_id: number | null
  }

  export type VehiclesMinAggregateOutputType = {
    id: number | null
    vrm: string | null
    vin: string | null
    make: string | null
    model: string | null
    using_customer_id: number | null
    owning_customer_id: number | null
  }

  export type VehiclesMaxAggregateOutputType = {
    id: number | null
    vrm: string | null
    vin: string | null
    make: string | null
    model: string | null
    using_customer_id: number | null
    owning_customer_id: number | null
  }

  export type VehiclesCountAggregateOutputType = {
    id: number
    vrm: number
    vin: number
    make: number
    model: number
    using_customer_id: number
    owning_customer_id: number
    _all: number
  }


  export type VehiclesAvgAggregateInputType = {
    id?: true
    using_customer_id?: true
    owning_customer_id?: true
  }

  export type VehiclesSumAggregateInputType = {
    id?: true
    using_customer_id?: true
    owning_customer_id?: true
  }

  export type VehiclesMinAggregateInputType = {
    id?: true
    vrm?: true
    vin?: true
    make?: true
    model?: true
    using_customer_id?: true
    owning_customer_id?: true
  }

  export type VehiclesMaxAggregateInputType = {
    id?: true
    vrm?: true
    vin?: true
    make?: true
    model?: true
    using_customer_id?: true
    owning_customer_id?: true
  }

  export type VehiclesCountAggregateInputType = {
    id?: true
    vrm?: true
    vin?: true
    make?: true
    model?: true
    using_customer_id?: true
    owning_customer_id?: true
    _all?: true
  }

  export type VehiclesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicles to aggregate.
     */
    where?: VehiclesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehiclesOrderByWithRelationInput | VehiclesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VehiclesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vehicles
    **/
    _count?: true | VehiclesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VehiclesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VehiclesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VehiclesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VehiclesMaxAggregateInputType
  }

  export type GetVehiclesAggregateType<T extends VehiclesAggregateArgs> = {
        [P in keyof T & keyof AggregateVehicles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVehicles[P]>
      : GetScalarType<T[P], AggregateVehicles[P]>
  }




  export type VehiclesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehiclesWhereInput
    orderBy?: VehiclesOrderByWithAggregationInput | VehiclesOrderByWithAggregationInput[]
    by: VehiclesScalarFieldEnum[] | VehiclesScalarFieldEnum
    having?: VehiclesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VehiclesCountAggregateInputType | true
    _avg?: VehiclesAvgAggregateInputType
    _sum?: VehiclesSumAggregateInputType
    _min?: VehiclesMinAggregateInputType
    _max?: VehiclesMaxAggregateInputType
  }

  export type VehiclesGroupByOutputType = {
    id: number
    vrm: string
    vin: string
    make: string
    model: string
    using_customer_id: number
    owning_customer_id: number
    _count: VehiclesCountAggregateOutputType | null
    _avg: VehiclesAvgAggregateOutputType | null
    _sum: VehiclesSumAggregateOutputType | null
    _min: VehiclesMinAggregateOutputType | null
    _max: VehiclesMaxAggregateOutputType | null
  }

  type GetVehiclesGroupByPayload<T extends VehiclesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VehiclesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VehiclesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VehiclesGroupByOutputType[P]>
            : GetScalarType<T[P], VehiclesGroupByOutputType[P]>
        }
      >
    >


  export type VehiclesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vrm?: boolean
    vin?: boolean
    make?: boolean
    model?: boolean
    using_customer_id?: boolean
    owning_customer_id?: boolean
    using_customer?: boolean | CustomerDefaultArgs<ExtArgs>
    owning_customer?: boolean | CustomerDefaultArgs<ExtArgs>
    Jobcard?: boolean | Vehicles$JobcardArgs<ExtArgs>
    _count?: boolean | VehiclesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicles"]>

  export type VehiclesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vrm?: boolean
    vin?: boolean
    make?: boolean
    model?: boolean
    using_customer_id?: boolean
    owning_customer_id?: boolean
    using_customer?: boolean | CustomerDefaultArgs<ExtArgs>
    owning_customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicles"]>

  export type VehiclesSelectScalar = {
    id?: boolean
    vrm?: boolean
    vin?: boolean
    make?: boolean
    model?: boolean
    using_customer_id?: boolean
    owning_customer_id?: boolean
  }

  export type VehiclesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    using_customer?: boolean | CustomerDefaultArgs<ExtArgs>
    owning_customer?: boolean | CustomerDefaultArgs<ExtArgs>
    Jobcard?: boolean | Vehicles$JobcardArgs<ExtArgs>
    _count?: boolean | VehiclesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VehiclesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    using_customer?: boolean | CustomerDefaultArgs<ExtArgs>
    owning_customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $VehiclesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vehicles"
    objects: {
      using_customer: Prisma.$CustomerPayload<ExtArgs>
      owning_customer: Prisma.$CustomerPayload<ExtArgs>
      Jobcard: Prisma.$JobcardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      vrm: string
      vin: string
      make: string
      model: string
      using_customer_id: number
      owning_customer_id: number
    }, ExtArgs["result"]["vehicles"]>
    composites: {}
  }

  type VehiclesGetPayload<S extends boolean | null | undefined | VehiclesDefaultArgs> = $Result.GetResult<Prisma.$VehiclesPayload, S>

  type VehiclesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VehiclesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VehiclesCountAggregateInputType | true
    }

  export interface VehiclesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vehicles'], meta: { name: 'Vehicles' } }
    /**
     * Find zero or one Vehicles that matches the filter.
     * @param {VehiclesFindUniqueArgs} args - Arguments to find a Vehicles
     * @example
     * // Get one Vehicles
     * const vehicles = await prisma.vehicles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VehiclesFindUniqueArgs>(args: SelectSubset<T, VehiclesFindUniqueArgs<ExtArgs>>): Prisma__VehiclesClient<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vehicles that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VehiclesFindUniqueOrThrowArgs} args - Arguments to find a Vehicles
     * @example
     * // Get one Vehicles
     * const vehicles = await prisma.vehicles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VehiclesFindUniqueOrThrowArgs>(args: SelectSubset<T, VehiclesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VehiclesClient<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclesFindFirstArgs} args - Arguments to find a Vehicles
     * @example
     * // Get one Vehicles
     * const vehicles = await prisma.vehicles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VehiclesFindFirstArgs>(args?: SelectSubset<T, VehiclesFindFirstArgs<ExtArgs>>): Prisma__VehiclesClient<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vehicles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclesFindFirstOrThrowArgs} args - Arguments to find a Vehicles
     * @example
     * // Get one Vehicles
     * const vehicles = await prisma.vehicles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VehiclesFindFirstOrThrowArgs>(args?: SelectSubset<T, VehiclesFindFirstOrThrowArgs<ExtArgs>>): Prisma__VehiclesClient<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vehicles
     * const vehicles = await prisma.vehicles.findMany()
     * 
     * // Get first 10 Vehicles
     * const vehicles = await prisma.vehicles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vehiclesWithIdOnly = await prisma.vehicles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VehiclesFindManyArgs>(args?: SelectSubset<T, VehiclesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vehicles.
     * @param {VehiclesCreateArgs} args - Arguments to create a Vehicles.
     * @example
     * // Create one Vehicles
     * const Vehicles = await prisma.vehicles.create({
     *   data: {
     *     // ... data to create a Vehicles
     *   }
     * })
     * 
     */
    create<T extends VehiclesCreateArgs>(args: SelectSubset<T, VehiclesCreateArgs<ExtArgs>>): Prisma__VehiclesClient<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vehicles.
     * @param {VehiclesCreateManyArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicles = await prisma.vehicles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VehiclesCreateManyArgs>(args?: SelectSubset<T, VehiclesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vehicles and returns the data saved in the database.
     * @param {VehiclesCreateManyAndReturnArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicles = await prisma.vehicles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vehicles and only return the `id`
     * const vehiclesWithIdOnly = await prisma.vehicles.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VehiclesCreateManyAndReturnArgs>(args?: SelectSubset<T, VehiclesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Vehicles.
     * @param {VehiclesDeleteArgs} args - Arguments to delete one Vehicles.
     * @example
     * // Delete one Vehicles
     * const Vehicles = await prisma.vehicles.delete({
     *   where: {
     *     // ... filter to delete one Vehicles
     *   }
     * })
     * 
     */
    delete<T extends VehiclesDeleteArgs>(args: SelectSubset<T, VehiclesDeleteArgs<ExtArgs>>): Prisma__VehiclesClient<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vehicles.
     * @param {VehiclesUpdateArgs} args - Arguments to update one Vehicles.
     * @example
     * // Update one Vehicles
     * const vehicles = await prisma.vehicles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VehiclesUpdateArgs>(args: SelectSubset<T, VehiclesUpdateArgs<ExtArgs>>): Prisma__VehiclesClient<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vehicles.
     * @param {VehiclesDeleteManyArgs} args - Arguments to filter Vehicles to delete.
     * @example
     * // Delete a few Vehicles
     * const { count } = await prisma.vehicles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VehiclesDeleteManyArgs>(args?: SelectSubset<T, VehiclesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vehicles
     * const vehicles = await prisma.vehicles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VehiclesUpdateManyArgs>(args: SelectSubset<T, VehiclesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vehicles.
     * @param {VehiclesUpsertArgs} args - Arguments to update or create a Vehicles.
     * @example
     * // Update or create a Vehicles
     * const vehicles = await prisma.vehicles.upsert({
     *   create: {
     *     // ... data to create a Vehicles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vehicles we want to update
     *   }
     * })
     */
    upsert<T extends VehiclesUpsertArgs>(args: SelectSubset<T, VehiclesUpsertArgs<ExtArgs>>): Prisma__VehiclesClient<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclesCountArgs} args - Arguments to filter Vehicles to count.
     * @example
     * // Count the number of Vehicles
     * const count = await prisma.vehicles.count({
     *   where: {
     *     // ... the filter for the Vehicles we want to count
     *   }
     * })
    **/
    count<T extends VehiclesCountArgs>(
      args?: Subset<T, VehiclesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VehiclesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VehiclesAggregateArgs>(args: Subset<T, VehiclesAggregateArgs>): Prisma.PrismaPromise<GetVehiclesAggregateType<T>>

    /**
     * Group by Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehiclesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VehiclesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VehiclesGroupByArgs['orderBy'] }
        : { orderBy?: VehiclesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VehiclesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehiclesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vehicles model
   */
  readonly fields: VehiclesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vehicles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VehiclesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    using_customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    owning_customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Jobcard<T extends Vehicles$JobcardArgs<ExtArgs> = {}>(args?: Subset<T, Vehicles$JobcardArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vehicles model
   */ 
  interface VehiclesFieldRefs {
    readonly id: FieldRef<"Vehicles", 'Int'>
    readonly vrm: FieldRef<"Vehicles", 'String'>
    readonly vin: FieldRef<"Vehicles", 'String'>
    readonly make: FieldRef<"Vehicles", 'String'>
    readonly model: FieldRef<"Vehicles", 'String'>
    readonly using_customer_id: FieldRef<"Vehicles", 'Int'>
    readonly owning_customer_id: FieldRef<"Vehicles", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Vehicles findUnique
   */
  export type VehiclesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where: VehiclesWhereUniqueInput
  }

  /**
   * Vehicles findUniqueOrThrow
   */
  export type VehiclesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where: VehiclesWhereUniqueInput
  }

  /**
   * Vehicles findFirst
   */
  export type VehiclesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where?: VehiclesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehiclesOrderByWithRelationInput | VehiclesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehiclesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehiclesScalarFieldEnum | VehiclesScalarFieldEnum[]
  }

  /**
   * Vehicles findFirstOrThrow
   */
  export type VehiclesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where?: VehiclesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehiclesOrderByWithRelationInput | VehiclesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehiclesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehiclesScalarFieldEnum | VehiclesScalarFieldEnum[]
  }

  /**
   * Vehicles findMany
   */
  export type VehiclesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where?: VehiclesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehiclesOrderByWithRelationInput | VehiclesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vehicles.
     */
    cursor?: VehiclesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    distinct?: VehiclesScalarFieldEnum | VehiclesScalarFieldEnum[]
  }

  /**
   * Vehicles create
   */
  export type VehiclesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    /**
     * The data needed to create a Vehicles.
     */
    data: XOR<VehiclesCreateInput, VehiclesUncheckedCreateInput>
  }

  /**
   * Vehicles createMany
   */
  export type VehiclesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vehicles.
     */
    data: VehiclesCreateManyInput | VehiclesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vehicles createManyAndReturn
   */
  export type VehiclesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Vehicles.
     */
    data: VehiclesCreateManyInput | VehiclesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vehicles update
   */
  export type VehiclesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    /**
     * The data needed to update a Vehicles.
     */
    data: XOR<VehiclesUpdateInput, VehiclesUncheckedUpdateInput>
    /**
     * Choose, which Vehicles to update.
     */
    where: VehiclesWhereUniqueInput
  }

  /**
   * Vehicles updateMany
   */
  export type VehiclesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vehicles.
     */
    data: XOR<VehiclesUpdateManyMutationInput, VehiclesUncheckedUpdateManyInput>
    /**
     * Filter which Vehicles to update
     */
    where?: VehiclesWhereInput
  }

  /**
   * Vehicles upsert
   */
  export type VehiclesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    /**
     * The filter to search for the Vehicles to update in case it exists.
     */
    where: VehiclesWhereUniqueInput
    /**
     * In case the Vehicles found by the `where` argument doesn't exist, create a new Vehicles with this data.
     */
    create: XOR<VehiclesCreateInput, VehiclesUncheckedCreateInput>
    /**
     * In case the Vehicles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VehiclesUpdateInput, VehiclesUncheckedUpdateInput>
  }

  /**
   * Vehicles delete
   */
  export type VehiclesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
    /**
     * Filter which Vehicles to delete.
     */
    where: VehiclesWhereUniqueInput
  }

  /**
   * Vehicles deleteMany
   */
  export type VehiclesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicles to delete
     */
    where?: VehiclesWhereInput
  }

  /**
   * Vehicles.Jobcard
   */
  export type Vehicles$JobcardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    where?: JobcardWhereInput
    orderBy?: JobcardOrderByWithRelationInput | JobcardOrderByWithRelationInput[]
    cursor?: JobcardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobcardScalarFieldEnum | JobcardScalarFieldEnum[]
  }

  /**
   * Vehicles without action
   */
  export type VehiclesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicles
     */
    select?: VehiclesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehiclesInclude<ExtArgs> | null
  }


  /**
   * Model Jobcard
   */

  export type AggregateJobcard = {
    _count: JobcardCountAggregateOutputType | null
    _avg: JobcardAvgAggregateOutputType | null
    _sum: JobcardSumAggregateOutputType | null
    _min: JobcardMinAggregateOutputType | null
    _max: JobcardMaxAggregateOutputType | null
  }

  export type JobcardAvgAggregateOutputType = {
    id: number | null
    jobcard_number: number | null
    vehicle_id: number | null
  }

  export type JobcardSumAggregateOutputType = {
    id: number | null
    jobcard_number: number | null
    vehicle_id: number | null
  }

  export type JobcardMinAggregateOutputType = {
    id: number | null
    jobcard_number: number | null
    vehicle_id: number | null
  }

  export type JobcardMaxAggregateOutputType = {
    id: number | null
    jobcard_number: number | null
    vehicle_id: number | null
  }

  export type JobcardCountAggregateOutputType = {
    id: number
    jobcard_number: number
    vehicle_id: number
    _all: number
  }


  export type JobcardAvgAggregateInputType = {
    id?: true
    jobcard_number?: true
    vehicle_id?: true
  }

  export type JobcardSumAggregateInputType = {
    id?: true
    jobcard_number?: true
    vehicle_id?: true
  }

  export type JobcardMinAggregateInputType = {
    id?: true
    jobcard_number?: true
    vehicle_id?: true
  }

  export type JobcardMaxAggregateInputType = {
    id?: true
    jobcard_number?: true
    vehicle_id?: true
  }

  export type JobcardCountAggregateInputType = {
    id?: true
    jobcard_number?: true
    vehicle_id?: true
    _all?: true
  }

  export type JobcardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobcard to aggregate.
     */
    where?: JobcardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobcards to fetch.
     */
    orderBy?: JobcardOrderByWithRelationInput | JobcardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobcardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobcards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobcards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobcards
    **/
    _count?: true | JobcardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobcardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobcardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobcardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobcardMaxAggregateInputType
  }

  export type GetJobcardAggregateType<T extends JobcardAggregateArgs> = {
        [P in keyof T & keyof AggregateJobcard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobcard[P]>
      : GetScalarType<T[P], AggregateJobcard[P]>
  }




  export type JobcardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobcardWhereInput
    orderBy?: JobcardOrderByWithAggregationInput | JobcardOrderByWithAggregationInput[]
    by: JobcardScalarFieldEnum[] | JobcardScalarFieldEnum
    having?: JobcardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobcardCountAggregateInputType | true
    _avg?: JobcardAvgAggregateInputType
    _sum?: JobcardSumAggregateInputType
    _min?: JobcardMinAggregateInputType
    _max?: JobcardMaxAggregateInputType
  }

  export type JobcardGroupByOutputType = {
    id: number
    jobcard_number: number
    vehicle_id: number
    _count: JobcardCountAggregateOutputType | null
    _avg: JobcardAvgAggregateOutputType | null
    _sum: JobcardSumAggregateOutputType | null
    _min: JobcardMinAggregateOutputType | null
    _max: JobcardMaxAggregateOutputType | null
  }

  type GetJobcardGroupByPayload<T extends JobcardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobcardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobcardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobcardGroupByOutputType[P]>
            : GetScalarType<T[P], JobcardGroupByOutputType[P]>
        }
      >
    >


  export type JobcardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobcard_number?: boolean
    vehicle_id?: boolean
    vehicle?: boolean | VehiclesDefaultArgs<ExtArgs>
    joblines?: boolean | Jobcard$joblinesArgs<ExtArgs>
    allocated_jobs?: boolean | Jobcard$allocated_jobsArgs<ExtArgs>
    _count?: boolean | JobcardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobcard"]>

  export type JobcardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobcard_number?: boolean
    vehicle_id?: boolean
    vehicle?: boolean | VehiclesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobcard"]>

  export type JobcardSelectScalar = {
    id?: boolean
    jobcard_number?: boolean
    vehicle_id?: boolean
  }

  export type JobcardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vehicle?: boolean | VehiclesDefaultArgs<ExtArgs>
    joblines?: boolean | Jobcard$joblinesArgs<ExtArgs>
    allocated_jobs?: boolean | Jobcard$allocated_jobsArgs<ExtArgs>
    _count?: boolean | JobcardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobcardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vehicle?: boolean | VehiclesDefaultArgs<ExtArgs>
  }

  export type $JobcardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Jobcard"
    objects: {
      vehicle: Prisma.$VehiclesPayload<ExtArgs>
      joblines: Prisma.$JoblinesPayload<ExtArgs>[]
      allocated_jobs: Prisma.$AllocatedJobsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobcard_number: number
      vehicle_id: number
    }, ExtArgs["result"]["jobcard"]>
    composites: {}
  }

  type JobcardGetPayload<S extends boolean | null | undefined | JobcardDefaultArgs> = $Result.GetResult<Prisma.$JobcardPayload, S>

  type JobcardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobcardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobcardCountAggregateInputType | true
    }

  export interface JobcardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jobcard'], meta: { name: 'Jobcard' } }
    /**
     * Find zero or one Jobcard that matches the filter.
     * @param {JobcardFindUniqueArgs} args - Arguments to find a Jobcard
     * @example
     * // Get one Jobcard
     * const jobcard = await prisma.jobcard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobcardFindUniqueArgs>(args: SelectSubset<T, JobcardFindUniqueArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Jobcard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobcardFindUniqueOrThrowArgs} args - Arguments to find a Jobcard
     * @example
     * // Get one Jobcard
     * const jobcard = await prisma.jobcard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobcardFindUniqueOrThrowArgs>(args: SelectSubset<T, JobcardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Jobcard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobcardFindFirstArgs} args - Arguments to find a Jobcard
     * @example
     * // Get one Jobcard
     * const jobcard = await prisma.jobcard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobcardFindFirstArgs>(args?: SelectSubset<T, JobcardFindFirstArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Jobcard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobcardFindFirstOrThrowArgs} args - Arguments to find a Jobcard
     * @example
     * // Get one Jobcard
     * const jobcard = await prisma.jobcard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobcardFindFirstOrThrowArgs>(args?: SelectSubset<T, JobcardFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jobcards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobcardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobcards
     * const jobcards = await prisma.jobcard.findMany()
     * 
     * // Get first 10 Jobcards
     * const jobcards = await prisma.jobcard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobcardWithIdOnly = await prisma.jobcard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobcardFindManyArgs>(args?: SelectSubset<T, JobcardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Jobcard.
     * @param {JobcardCreateArgs} args - Arguments to create a Jobcard.
     * @example
     * // Create one Jobcard
     * const Jobcard = await prisma.jobcard.create({
     *   data: {
     *     // ... data to create a Jobcard
     *   }
     * })
     * 
     */
    create<T extends JobcardCreateArgs>(args: SelectSubset<T, JobcardCreateArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jobcards.
     * @param {JobcardCreateManyArgs} args - Arguments to create many Jobcards.
     * @example
     * // Create many Jobcards
     * const jobcard = await prisma.jobcard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobcardCreateManyArgs>(args?: SelectSubset<T, JobcardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobcards and returns the data saved in the database.
     * @param {JobcardCreateManyAndReturnArgs} args - Arguments to create many Jobcards.
     * @example
     * // Create many Jobcards
     * const jobcard = await prisma.jobcard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobcards and only return the `id`
     * const jobcardWithIdOnly = await prisma.jobcard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobcardCreateManyAndReturnArgs>(args?: SelectSubset<T, JobcardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Jobcard.
     * @param {JobcardDeleteArgs} args - Arguments to delete one Jobcard.
     * @example
     * // Delete one Jobcard
     * const Jobcard = await prisma.jobcard.delete({
     *   where: {
     *     // ... filter to delete one Jobcard
     *   }
     * })
     * 
     */
    delete<T extends JobcardDeleteArgs>(args: SelectSubset<T, JobcardDeleteArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Jobcard.
     * @param {JobcardUpdateArgs} args - Arguments to update one Jobcard.
     * @example
     * // Update one Jobcard
     * const jobcard = await prisma.jobcard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobcardUpdateArgs>(args: SelectSubset<T, JobcardUpdateArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jobcards.
     * @param {JobcardDeleteManyArgs} args - Arguments to filter Jobcards to delete.
     * @example
     * // Delete a few Jobcards
     * const { count } = await prisma.jobcard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobcardDeleteManyArgs>(args?: SelectSubset<T, JobcardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobcards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobcardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobcards
     * const jobcard = await prisma.jobcard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobcardUpdateManyArgs>(args: SelectSubset<T, JobcardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jobcard.
     * @param {JobcardUpsertArgs} args - Arguments to update or create a Jobcard.
     * @example
     * // Update or create a Jobcard
     * const jobcard = await prisma.jobcard.upsert({
     *   create: {
     *     // ... data to create a Jobcard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jobcard we want to update
     *   }
     * })
     */
    upsert<T extends JobcardUpsertArgs>(args: SelectSubset<T, JobcardUpsertArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jobcards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobcardCountArgs} args - Arguments to filter Jobcards to count.
     * @example
     * // Count the number of Jobcards
     * const count = await prisma.jobcard.count({
     *   where: {
     *     // ... the filter for the Jobcards we want to count
     *   }
     * })
    **/
    count<T extends JobcardCountArgs>(
      args?: Subset<T, JobcardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobcardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jobcard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobcardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobcardAggregateArgs>(args: Subset<T, JobcardAggregateArgs>): Prisma.PrismaPromise<GetJobcardAggregateType<T>>

    /**
     * Group by Jobcard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobcardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobcardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobcardGroupByArgs['orderBy'] }
        : { orderBy?: JobcardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobcardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobcardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jobcard model
   */
  readonly fields: JobcardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jobcard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobcardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vehicle<T extends VehiclesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VehiclesDefaultArgs<ExtArgs>>): Prisma__VehiclesClient<$Result.GetResult<Prisma.$VehiclesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    joblines<T extends Jobcard$joblinesArgs<ExtArgs> = {}>(args?: Subset<T, Jobcard$joblinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "findMany"> | Null>
    allocated_jobs<T extends Jobcard$allocated_jobsArgs<ExtArgs> = {}>(args?: Subset<T, Jobcard$allocated_jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Jobcard model
   */ 
  interface JobcardFieldRefs {
    readonly id: FieldRef<"Jobcard", 'Int'>
    readonly jobcard_number: FieldRef<"Jobcard", 'Int'>
    readonly vehicle_id: FieldRef<"Jobcard", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Jobcard findUnique
   */
  export type JobcardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    /**
     * Filter, which Jobcard to fetch.
     */
    where: JobcardWhereUniqueInput
  }

  /**
   * Jobcard findUniqueOrThrow
   */
  export type JobcardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    /**
     * Filter, which Jobcard to fetch.
     */
    where: JobcardWhereUniqueInput
  }

  /**
   * Jobcard findFirst
   */
  export type JobcardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    /**
     * Filter, which Jobcard to fetch.
     */
    where?: JobcardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobcards to fetch.
     */
    orderBy?: JobcardOrderByWithRelationInput | JobcardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobcards.
     */
    cursor?: JobcardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobcards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobcards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobcards.
     */
    distinct?: JobcardScalarFieldEnum | JobcardScalarFieldEnum[]
  }

  /**
   * Jobcard findFirstOrThrow
   */
  export type JobcardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    /**
     * Filter, which Jobcard to fetch.
     */
    where?: JobcardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobcards to fetch.
     */
    orderBy?: JobcardOrderByWithRelationInput | JobcardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobcards.
     */
    cursor?: JobcardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobcards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobcards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobcards.
     */
    distinct?: JobcardScalarFieldEnum | JobcardScalarFieldEnum[]
  }

  /**
   * Jobcard findMany
   */
  export type JobcardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    /**
     * Filter, which Jobcards to fetch.
     */
    where?: JobcardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobcards to fetch.
     */
    orderBy?: JobcardOrderByWithRelationInput | JobcardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobcards.
     */
    cursor?: JobcardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobcards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobcards.
     */
    skip?: number
    distinct?: JobcardScalarFieldEnum | JobcardScalarFieldEnum[]
  }

  /**
   * Jobcard create
   */
  export type JobcardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    /**
     * The data needed to create a Jobcard.
     */
    data: XOR<JobcardCreateInput, JobcardUncheckedCreateInput>
  }

  /**
   * Jobcard createMany
   */
  export type JobcardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobcards.
     */
    data: JobcardCreateManyInput | JobcardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Jobcard createManyAndReturn
   */
  export type JobcardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Jobcards.
     */
    data: JobcardCreateManyInput | JobcardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Jobcard update
   */
  export type JobcardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    /**
     * The data needed to update a Jobcard.
     */
    data: XOR<JobcardUpdateInput, JobcardUncheckedUpdateInput>
    /**
     * Choose, which Jobcard to update.
     */
    where: JobcardWhereUniqueInput
  }

  /**
   * Jobcard updateMany
   */
  export type JobcardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobcards.
     */
    data: XOR<JobcardUpdateManyMutationInput, JobcardUncheckedUpdateManyInput>
    /**
     * Filter which Jobcards to update
     */
    where?: JobcardWhereInput
  }

  /**
   * Jobcard upsert
   */
  export type JobcardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    /**
     * The filter to search for the Jobcard to update in case it exists.
     */
    where: JobcardWhereUniqueInput
    /**
     * In case the Jobcard found by the `where` argument doesn't exist, create a new Jobcard with this data.
     */
    create: XOR<JobcardCreateInput, JobcardUncheckedCreateInput>
    /**
     * In case the Jobcard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobcardUpdateInput, JobcardUncheckedUpdateInput>
  }

  /**
   * Jobcard delete
   */
  export type JobcardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
    /**
     * Filter which Jobcard to delete.
     */
    where: JobcardWhereUniqueInput
  }

  /**
   * Jobcard deleteMany
   */
  export type JobcardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobcards to delete
     */
    where?: JobcardWhereInput
  }

  /**
   * Jobcard.joblines
   */
  export type Jobcard$joblinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    where?: JoblinesWhereInput
    orderBy?: JoblinesOrderByWithRelationInput | JoblinesOrderByWithRelationInput[]
    cursor?: JoblinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoblinesScalarFieldEnum | JoblinesScalarFieldEnum[]
  }

  /**
   * Jobcard.allocated_jobs
   */
  export type Jobcard$allocated_jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    where?: AllocatedJobsWhereInput
    orderBy?: AllocatedJobsOrderByWithRelationInput | AllocatedJobsOrderByWithRelationInput[]
    cursor?: AllocatedJobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllocatedJobsScalarFieldEnum | AllocatedJobsScalarFieldEnum[]
  }

  /**
   * Jobcard without action
   */
  export type JobcardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jobcard
     */
    select?: JobcardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobcardInclude<ExtArgs> | null
  }


  /**
   * Model Joblines
   */

  export type AggregateJoblines = {
    _count: JoblinesCountAggregateOutputType | null
    _avg: JoblinesAvgAggregateOutputType | null
    _sum: JoblinesSumAggregateOutputType | null
    _min: JoblinesMinAggregateOutputType | null
    _max: JoblinesMaxAggregateOutputType | null
  }

  export type JoblinesAvgAggregateOutputType = {
    id: number | null
    jobcard_id: number | null
    time_allocated: number | null
  }

  export type JoblinesSumAggregateOutputType = {
    id: number | null
    jobcard_id: number | null
    time_allocated: number | null
  }

  export type JoblinesMinAggregateOutputType = {
    id: number | null
    jobcard_id: number | null
    description: string | null
    time_allocated: number | null
  }

  export type JoblinesMaxAggregateOutputType = {
    id: number | null
    jobcard_id: number | null
    description: string | null
    time_allocated: number | null
  }

  export type JoblinesCountAggregateOutputType = {
    id: number
    jobcard_id: number
    description: number
    time_allocated: number
    _all: number
  }


  export type JoblinesAvgAggregateInputType = {
    id?: true
    jobcard_id?: true
    time_allocated?: true
  }

  export type JoblinesSumAggregateInputType = {
    id?: true
    jobcard_id?: true
    time_allocated?: true
  }

  export type JoblinesMinAggregateInputType = {
    id?: true
    jobcard_id?: true
    description?: true
    time_allocated?: true
  }

  export type JoblinesMaxAggregateInputType = {
    id?: true
    jobcard_id?: true
    description?: true
    time_allocated?: true
  }

  export type JoblinesCountAggregateInputType = {
    id?: true
    jobcard_id?: true
    description?: true
    time_allocated?: true
    _all?: true
  }

  export type JoblinesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Joblines to aggregate.
     */
    where?: JoblinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joblines to fetch.
     */
    orderBy?: JoblinesOrderByWithRelationInput | JoblinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JoblinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joblines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joblines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Joblines
    **/
    _count?: true | JoblinesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JoblinesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JoblinesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JoblinesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JoblinesMaxAggregateInputType
  }

  export type GetJoblinesAggregateType<T extends JoblinesAggregateArgs> = {
        [P in keyof T & keyof AggregateJoblines]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJoblines[P]>
      : GetScalarType<T[P], AggregateJoblines[P]>
  }




  export type JoblinesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoblinesWhereInput
    orderBy?: JoblinesOrderByWithAggregationInput | JoblinesOrderByWithAggregationInput[]
    by: JoblinesScalarFieldEnum[] | JoblinesScalarFieldEnum
    having?: JoblinesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JoblinesCountAggregateInputType | true
    _avg?: JoblinesAvgAggregateInputType
    _sum?: JoblinesSumAggregateInputType
    _min?: JoblinesMinAggregateInputType
    _max?: JoblinesMaxAggregateInputType
  }

  export type JoblinesGroupByOutputType = {
    id: number
    jobcard_id: number
    description: string
    time_allocated: number
    _count: JoblinesCountAggregateOutputType | null
    _avg: JoblinesAvgAggregateOutputType | null
    _sum: JoblinesSumAggregateOutputType | null
    _min: JoblinesMinAggregateOutputType | null
    _max: JoblinesMaxAggregateOutputType | null
  }

  type GetJoblinesGroupByPayload<T extends JoblinesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JoblinesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JoblinesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JoblinesGroupByOutputType[P]>
            : GetScalarType<T[P], JoblinesGroupByOutputType[P]>
        }
      >
    >


  export type JoblinesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobcard_id?: boolean
    description?: boolean
    time_allocated?: boolean
    jobcard_number?: boolean | JobcardDefaultArgs<ExtArgs>
    comments?: boolean | Joblines$commentsArgs<ExtArgs>
    _count?: boolean | JoblinesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joblines"]>

  export type JoblinesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobcard_id?: boolean
    description?: boolean
    time_allocated?: boolean
    jobcard_number?: boolean | JobcardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joblines"]>

  export type JoblinesSelectScalar = {
    id?: boolean
    jobcard_id?: boolean
    description?: boolean
    time_allocated?: boolean
  }

  export type JoblinesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobcard_number?: boolean | JobcardDefaultArgs<ExtArgs>
    comments?: boolean | Joblines$commentsArgs<ExtArgs>
    _count?: boolean | JoblinesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JoblinesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobcard_number?: boolean | JobcardDefaultArgs<ExtArgs>
  }

  export type $JoblinesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Joblines"
    objects: {
      jobcard_number: Prisma.$JobcardPayload<ExtArgs>
      comments: Prisma.$CommentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobcard_id: number
      description: string
      time_allocated: number
    }, ExtArgs["result"]["joblines"]>
    composites: {}
  }

  type JoblinesGetPayload<S extends boolean | null | undefined | JoblinesDefaultArgs> = $Result.GetResult<Prisma.$JoblinesPayload, S>

  type JoblinesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JoblinesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JoblinesCountAggregateInputType | true
    }

  export interface JoblinesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Joblines'], meta: { name: 'Joblines' } }
    /**
     * Find zero or one Joblines that matches the filter.
     * @param {JoblinesFindUniqueArgs} args - Arguments to find a Joblines
     * @example
     * // Get one Joblines
     * const joblines = await prisma.joblines.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JoblinesFindUniqueArgs>(args: SelectSubset<T, JoblinesFindUniqueArgs<ExtArgs>>): Prisma__JoblinesClient<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Joblines that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JoblinesFindUniqueOrThrowArgs} args - Arguments to find a Joblines
     * @example
     * // Get one Joblines
     * const joblines = await prisma.joblines.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JoblinesFindUniqueOrThrowArgs>(args: SelectSubset<T, JoblinesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JoblinesClient<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Joblines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoblinesFindFirstArgs} args - Arguments to find a Joblines
     * @example
     * // Get one Joblines
     * const joblines = await prisma.joblines.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JoblinesFindFirstArgs>(args?: SelectSubset<T, JoblinesFindFirstArgs<ExtArgs>>): Prisma__JoblinesClient<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Joblines that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoblinesFindFirstOrThrowArgs} args - Arguments to find a Joblines
     * @example
     * // Get one Joblines
     * const joblines = await prisma.joblines.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JoblinesFindFirstOrThrowArgs>(args?: SelectSubset<T, JoblinesFindFirstOrThrowArgs<ExtArgs>>): Prisma__JoblinesClient<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Joblines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoblinesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Joblines
     * const joblines = await prisma.joblines.findMany()
     * 
     * // Get first 10 Joblines
     * const joblines = await prisma.joblines.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const joblinesWithIdOnly = await prisma.joblines.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JoblinesFindManyArgs>(args?: SelectSubset<T, JoblinesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Joblines.
     * @param {JoblinesCreateArgs} args - Arguments to create a Joblines.
     * @example
     * // Create one Joblines
     * const Joblines = await prisma.joblines.create({
     *   data: {
     *     // ... data to create a Joblines
     *   }
     * })
     * 
     */
    create<T extends JoblinesCreateArgs>(args: SelectSubset<T, JoblinesCreateArgs<ExtArgs>>): Prisma__JoblinesClient<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Joblines.
     * @param {JoblinesCreateManyArgs} args - Arguments to create many Joblines.
     * @example
     * // Create many Joblines
     * const joblines = await prisma.joblines.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JoblinesCreateManyArgs>(args?: SelectSubset<T, JoblinesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Joblines and returns the data saved in the database.
     * @param {JoblinesCreateManyAndReturnArgs} args - Arguments to create many Joblines.
     * @example
     * // Create many Joblines
     * const joblines = await prisma.joblines.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Joblines and only return the `id`
     * const joblinesWithIdOnly = await prisma.joblines.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JoblinesCreateManyAndReturnArgs>(args?: SelectSubset<T, JoblinesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Joblines.
     * @param {JoblinesDeleteArgs} args - Arguments to delete one Joblines.
     * @example
     * // Delete one Joblines
     * const Joblines = await prisma.joblines.delete({
     *   where: {
     *     // ... filter to delete one Joblines
     *   }
     * })
     * 
     */
    delete<T extends JoblinesDeleteArgs>(args: SelectSubset<T, JoblinesDeleteArgs<ExtArgs>>): Prisma__JoblinesClient<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Joblines.
     * @param {JoblinesUpdateArgs} args - Arguments to update one Joblines.
     * @example
     * // Update one Joblines
     * const joblines = await prisma.joblines.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JoblinesUpdateArgs>(args: SelectSubset<T, JoblinesUpdateArgs<ExtArgs>>): Prisma__JoblinesClient<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Joblines.
     * @param {JoblinesDeleteManyArgs} args - Arguments to filter Joblines to delete.
     * @example
     * // Delete a few Joblines
     * const { count } = await prisma.joblines.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JoblinesDeleteManyArgs>(args?: SelectSubset<T, JoblinesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Joblines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoblinesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Joblines
     * const joblines = await prisma.joblines.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JoblinesUpdateManyArgs>(args: SelectSubset<T, JoblinesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Joblines.
     * @param {JoblinesUpsertArgs} args - Arguments to update or create a Joblines.
     * @example
     * // Update or create a Joblines
     * const joblines = await prisma.joblines.upsert({
     *   create: {
     *     // ... data to create a Joblines
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Joblines we want to update
     *   }
     * })
     */
    upsert<T extends JoblinesUpsertArgs>(args: SelectSubset<T, JoblinesUpsertArgs<ExtArgs>>): Prisma__JoblinesClient<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Joblines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoblinesCountArgs} args - Arguments to filter Joblines to count.
     * @example
     * // Count the number of Joblines
     * const count = await prisma.joblines.count({
     *   where: {
     *     // ... the filter for the Joblines we want to count
     *   }
     * })
    **/
    count<T extends JoblinesCountArgs>(
      args?: Subset<T, JoblinesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JoblinesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Joblines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoblinesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JoblinesAggregateArgs>(args: Subset<T, JoblinesAggregateArgs>): Prisma.PrismaPromise<GetJoblinesAggregateType<T>>

    /**
     * Group by Joblines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoblinesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JoblinesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JoblinesGroupByArgs['orderBy'] }
        : { orderBy?: JoblinesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JoblinesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJoblinesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Joblines model
   */
  readonly fields: JoblinesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Joblines.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JoblinesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobcard_number<T extends JobcardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobcardDefaultArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends Joblines$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Joblines$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Joblines model
   */ 
  interface JoblinesFieldRefs {
    readonly id: FieldRef<"Joblines", 'Int'>
    readonly jobcard_id: FieldRef<"Joblines", 'Int'>
    readonly description: FieldRef<"Joblines", 'String'>
    readonly time_allocated: FieldRef<"Joblines", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Joblines findUnique
   */
  export type JoblinesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    /**
     * Filter, which Joblines to fetch.
     */
    where: JoblinesWhereUniqueInput
  }

  /**
   * Joblines findUniqueOrThrow
   */
  export type JoblinesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    /**
     * Filter, which Joblines to fetch.
     */
    where: JoblinesWhereUniqueInput
  }

  /**
   * Joblines findFirst
   */
  export type JoblinesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    /**
     * Filter, which Joblines to fetch.
     */
    where?: JoblinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joblines to fetch.
     */
    orderBy?: JoblinesOrderByWithRelationInput | JoblinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Joblines.
     */
    cursor?: JoblinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joblines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joblines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Joblines.
     */
    distinct?: JoblinesScalarFieldEnum | JoblinesScalarFieldEnum[]
  }

  /**
   * Joblines findFirstOrThrow
   */
  export type JoblinesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    /**
     * Filter, which Joblines to fetch.
     */
    where?: JoblinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joblines to fetch.
     */
    orderBy?: JoblinesOrderByWithRelationInput | JoblinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Joblines.
     */
    cursor?: JoblinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joblines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joblines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Joblines.
     */
    distinct?: JoblinesScalarFieldEnum | JoblinesScalarFieldEnum[]
  }

  /**
   * Joblines findMany
   */
  export type JoblinesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    /**
     * Filter, which Joblines to fetch.
     */
    where?: JoblinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joblines to fetch.
     */
    orderBy?: JoblinesOrderByWithRelationInput | JoblinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Joblines.
     */
    cursor?: JoblinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joblines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joblines.
     */
    skip?: number
    distinct?: JoblinesScalarFieldEnum | JoblinesScalarFieldEnum[]
  }

  /**
   * Joblines create
   */
  export type JoblinesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    /**
     * The data needed to create a Joblines.
     */
    data: XOR<JoblinesCreateInput, JoblinesUncheckedCreateInput>
  }

  /**
   * Joblines createMany
   */
  export type JoblinesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Joblines.
     */
    data: JoblinesCreateManyInput | JoblinesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Joblines createManyAndReturn
   */
  export type JoblinesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Joblines.
     */
    data: JoblinesCreateManyInput | JoblinesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Joblines update
   */
  export type JoblinesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    /**
     * The data needed to update a Joblines.
     */
    data: XOR<JoblinesUpdateInput, JoblinesUncheckedUpdateInput>
    /**
     * Choose, which Joblines to update.
     */
    where: JoblinesWhereUniqueInput
  }

  /**
   * Joblines updateMany
   */
  export type JoblinesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Joblines.
     */
    data: XOR<JoblinesUpdateManyMutationInput, JoblinesUncheckedUpdateManyInput>
    /**
     * Filter which Joblines to update
     */
    where?: JoblinesWhereInput
  }

  /**
   * Joblines upsert
   */
  export type JoblinesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    /**
     * The filter to search for the Joblines to update in case it exists.
     */
    where: JoblinesWhereUniqueInput
    /**
     * In case the Joblines found by the `where` argument doesn't exist, create a new Joblines with this data.
     */
    create: XOR<JoblinesCreateInput, JoblinesUncheckedCreateInput>
    /**
     * In case the Joblines was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JoblinesUpdateInput, JoblinesUncheckedUpdateInput>
  }

  /**
   * Joblines delete
   */
  export type JoblinesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
    /**
     * Filter which Joblines to delete.
     */
    where: JoblinesWhereUniqueInput
  }

  /**
   * Joblines deleteMany
   */
  export type JoblinesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Joblines to delete
     */
    where?: JoblinesWhereInput
  }

  /**
   * Joblines.comments
   */
  export type Joblines$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Joblines without action
   */
  export type JoblinesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joblines
     */
    select?: JoblinesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoblinesInclude<ExtArgs> | null
  }


  /**
   * Model AllocatedJobs
   */

  export type AggregateAllocatedJobs = {
    _count: AllocatedJobsCountAggregateOutputType | null
    _avg: AllocatedJobsAvgAggregateOutputType | null
    _sum: AllocatedJobsSumAggregateOutputType | null
    _min: AllocatedJobsMinAggregateOutputType | null
    _max: AllocatedJobsMaxAggregateOutputType | null
  }

  export type AllocatedJobsAvgAggregateOutputType = {
    id: number | null
    jobcard_id: number | null
    employee_id: number | null
  }

  export type AllocatedJobsSumAggregateOutputType = {
    id: number | null
    jobcard_id: number | null
    employee_id: number | null
  }

  export type AllocatedJobsMinAggregateOutputType = {
    id: number | null
    jobcard_id: number | null
    employee_id: number | null
  }

  export type AllocatedJobsMaxAggregateOutputType = {
    id: number | null
    jobcard_id: number | null
    employee_id: number | null
  }

  export type AllocatedJobsCountAggregateOutputType = {
    id: number
    jobcard_id: number
    employee_id: number
    _all: number
  }


  export type AllocatedJobsAvgAggregateInputType = {
    id?: true
    jobcard_id?: true
    employee_id?: true
  }

  export type AllocatedJobsSumAggregateInputType = {
    id?: true
    jobcard_id?: true
    employee_id?: true
  }

  export type AllocatedJobsMinAggregateInputType = {
    id?: true
    jobcard_id?: true
    employee_id?: true
  }

  export type AllocatedJobsMaxAggregateInputType = {
    id?: true
    jobcard_id?: true
    employee_id?: true
  }

  export type AllocatedJobsCountAggregateInputType = {
    id?: true
    jobcard_id?: true
    employee_id?: true
    _all?: true
  }

  export type AllocatedJobsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AllocatedJobs to aggregate.
     */
    where?: AllocatedJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllocatedJobs to fetch.
     */
    orderBy?: AllocatedJobsOrderByWithRelationInput | AllocatedJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllocatedJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllocatedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllocatedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AllocatedJobs
    **/
    _count?: true | AllocatedJobsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllocatedJobsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllocatedJobsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllocatedJobsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllocatedJobsMaxAggregateInputType
  }

  export type GetAllocatedJobsAggregateType<T extends AllocatedJobsAggregateArgs> = {
        [P in keyof T & keyof AggregateAllocatedJobs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllocatedJobs[P]>
      : GetScalarType<T[P], AggregateAllocatedJobs[P]>
  }




  export type AllocatedJobsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocatedJobsWhereInput
    orderBy?: AllocatedJobsOrderByWithAggregationInput | AllocatedJobsOrderByWithAggregationInput[]
    by: AllocatedJobsScalarFieldEnum[] | AllocatedJobsScalarFieldEnum
    having?: AllocatedJobsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllocatedJobsCountAggregateInputType | true
    _avg?: AllocatedJobsAvgAggregateInputType
    _sum?: AllocatedJobsSumAggregateInputType
    _min?: AllocatedJobsMinAggregateInputType
    _max?: AllocatedJobsMaxAggregateInputType
  }

  export type AllocatedJobsGroupByOutputType = {
    id: number
    jobcard_id: number
    employee_id: number
    _count: AllocatedJobsCountAggregateOutputType | null
    _avg: AllocatedJobsAvgAggregateOutputType | null
    _sum: AllocatedJobsSumAggregateOutputType | null
    _min: AllocatedJobsMinAggregateOutputType | null
    _max: AllocatedJobsMaxAggregateOutputType | null
  }

  type GetAllocatedJobsGroupByPayload<T extends AllocatedJobsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllocatedJobsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllocatedJobsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllocatedJobsGroupByOutputType[P]>
            : GetScalarType<T[P], AllocatedJobsGroupByOutputType[P]>
        }
      >
    >


  export type AllocatedJobsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobcard_id?: boolean
    employee_id?: boolean
    jobcard?: boolean | JobcardDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allocatedJobs"]>

  export type AllocatedJobsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobcard_id?: boolean
    employee_id?: boolean
    jobcard?: boolean | JobcardDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allocatedJobs"]>

  export type AllocatedJobsSelectScalar = {
    id?: boolean
    jobcard_id?: boolean
    employee_id?: boolean
  }

  export type AllocatedJobsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobcard?: boolean | JobcardDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type AllocatedJobsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobcard?: boolean | JobcardDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $AllocatedJobsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AllocatedJobs"
    objects: {
      jobcard: Prisma.$JobcardPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobcard_id: number
      employee_id: number
    }, ExtArgs["result"]["allocatedJobs"]>
    composites: {}
  }

  type AllocatedJobsGetPayload<S extends boolean | null | undefined | AllocatedJobsDefaultArgs> = $Result.GetResult<Prisma.$AllocatedJobsPayload, S>

  type AllocatedJobsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AllocatedJobsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AllocatedJobsCountAggregateInputType | true
    }

  export interface AllocatedJobsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AllocatedJobs'], meta: { name: 'AllocatedJobs' } }
    /**
     * Find zero or one AllocatedJobs that matches the filter.
     * @param {AllocatedJobsFindUniqueArgs} args - Arguments to find a AllocatedJobs
     * @example
     * // Get one AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AllocatedJobsFindUniqueArgs>(args: SelectSubset<T, AllocatedJobsFindUniqueArgs<ExtArgs>>): Prisma__AllocatedJobsClient<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AllocatedJobs that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AllocatedJobsFindUniqueOrThrowArgs} args - Arguments to find a AllocatedJobs
     * @example
     * // Get one AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AllocatedJobsFindUniqueOrThrowArgs>(args: SelectSubset<T, AllocatedJobsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllocatedJobsClient<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AllocatedJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocatedJobsFindFirstArgs} args - Arguments to find a AllocatedJobs
     * @example
     * // Get one AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AllocatedJobsFindFirstArgs>(args?: SelectSubset<T, AllocatedJobsFindFirstArgs<ExtArgs>>): Prisma__AllocatedJobsClient<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AllocatedJobs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocatedJobsFindFirstOrThrowArgs} args - Arguments to find a AllocatedJobs
     * @example
     * // Get one AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AllocatedJobsFindFirstOrThrowArgs>(args?: SelectSubset<T, AllocatedJobsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllocatedJobsClient<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AllocatedJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocatedJobsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.findMany()
     * 
     * // Get first 10 AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allocatedJobsWithIdOnly = await prisma.allocatedJobs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AllocatedJobsFindManyArgs>(args?: SelectSubset<T, AllocatedJobsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AllocatedJobs.
     * @param {AllocatedJobsCreateArgs} args - Arguments to create a AllocatedJobs.
     * @example
     * // Create one AllocatedJobs
     * const AllocatedJobs = await prisma.allocatedJobs.create({
     *   data: {
     *     // ... data to create a AllocatedJobs
     *   }
     * })
     * 
     */
    create<T extends AllocatedJobsCreateArgs>(args: SelectSubset<T, AllocatedJobsCreateArgs<ExtArgs>>): Prisma__AllocatedJobsClient<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AllocatedJobs.
     * @param {AllocatedJobsCreateManyArgs} args - Arguments to create many AllocatedJobs.
     * @example
     * // Create many AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AllocatedJobsCreateManyArgs>(args?: SelectSubset<T, AllocatedJobsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AllocatedJobs and returns the data saved in the database.
     * @param {AllocatedJobsCreateManyAndReturnArgs} args - Arguments to create many AllocatedJobs.
     * @example
     * // Create many AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AllocatedJobs and only return the `id`
     * const allocatedJobsWithIdOnly = await prisma.allocatedJobs.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AllocatedJobsCreateManyAndReturnArgs>(args?: SelectSubset<T, AllocatedJobsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AllocatedJobs.
     * @param {AllocatedJobsDeleteArgs} args - Arguments to delete one AllocatedJobs.
     * @example
     * // Delete one AllocatedJobs
     * const AllocatedJobs = await prisma.allocatedJobs.delete({
     *   where: {
     *     // ... filter to delete one AllocatedJobs
     *   }
     * })
     * 
     */
    delete<T extends AllocatedJobsDeleteArgs>(args: SelectSubset<T, AllocatedJobsDeleteArgs<ExtArgs>>): Prisma__AllocatedJobsClient<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AllocatedJobs.
     * @param {AllocatedJobsUpdateArgs} args - Arguments to update one AllocatedJobs.
     * @example
     * // Update one AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AllocatedJobsUpdateArgs>(args: SelectSubset<T, AllocatedJobsUpdateArgs<ExtArgs>>): Prisma__AllocatedJobsClient<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AllocatedJobs.
     * @param {AllocatedJobsDeleteManyArgs} args - Arguments to filter AllocatedJobs to delete.
     * @example
     * // Delete a few AllocatedJobs
     * const { count } = await prisma.allocatedJobs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AllocatedJobsDeleteManyArgs>(args?: SelectSubset<T, AllocatedJobsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AllocatedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocatedJobsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AllocatedJobsUpdateManyArgs>(args: SelectSubset<T, AllocatedJobsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AllocatedJobs.
     * @param {AllocatedJobsUpsertArgs} args - Arguments to update or create a AllocatedJobs.
     * @example
     * // Update or create a AllocatedJobs
     * const allocatedJobs = await prisma.allocatedJobs.upsert({
     *   create: {
     *     // ... data to create a AllocatedJobs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AllocatedJobs we want to update
     *   }
     * })
     */
    upsert<T extends AllocatedJobsUpsertArgs>(args: SelectSubset<T, AllocatedJobsUpsertArgs<ExtArgs>>): Prisma__AllocatedJobsClient<$Result.GetResult<Prisma.$AllocatedJobsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AllocatedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocatedJobsCountArgs} args - Arguments to filter AllocatedJobs to count.
     * @example
     * // Count the number of AllocatedJobs
     * const count = await prisma.allocatedJobs.count({
     *   where: {
     *     // ... the filter for the AllocatedJobs we want to count
     *   }
     * })
    **/
    count<T extends AllocatedJobsCountArgs>(
      args?: Subset<T, AllocatedJobsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllocatedJobsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AllocatedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocatedJobsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllocatedJobsAggregateArgs>(args: Subset<T, AllocatedJobsAggregateArgs>): Prisma.PrismaPromise<GetAllocatedJobsAggregateType<T>>

    /**
     * Group by AllocatedJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocatedJobsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllocatedJobsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllocatedJobsGroupByArgs['orderBy'] }
        : { orderBy?: AllocatedJobsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllocatedJobsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllocatedJobsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AllocatedJobs model
   */
  readonly fields: AllocatedJobsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AllocatedJobs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllocatedJobsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobcard<T extends JobcardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobcardDefaultArgs<ExtArgs>>): Prisma__JobcardClient<$Result.GetResult<Prisma.$JobcardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AllocatedJobs model
   */ 
  interface AllocatedJobsFieldRefs {
    readonly id: FieldRef<"AllocatedJobs", 'Int'>
    readonly jobcard_id: FieldRef<"AllocatedJobs", 'Int'>
    readonly employee_id: FieldRef<"AllocatedJobs", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AllocatedJobs findUnique
   */
  export type AllocatedJobsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    /**
     * Filter, which AllocatedJobs to fetch.
     */
    where: AllocatedJobsWhereUniqueInput
  }

  /**
   * AllocatedJobs findUniqueOrThrow
   */
  export type AllocatedJobsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    /**
     * Filter, which AllocatedJobs to fetch.
     */
    where: AllocatedJobsWhereUniqueInput
  }

  /**
   * AllocatedJobs findFirst
   */
  export type AllocatedJobsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    /**
     * Filter, which AllocatedJobs to fetch.
     */
    where?: AllocatedJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllocatedJobs to fetch.
     */
    orderBy?: AllocatedJobsOrderByWithRelationInput | AllocatedJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AllocatedJobs.
     */
    cursor?: AllocatedJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllocatedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllocatedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AllocatedJobs.
     */
    distinct?: AllocatedJobsScalarFieldEnum | AllocatedJobsScalarFieldEnum[]
  }

  /**
   * AllocatedJobs findFirstOrThrow
   */
  export type AllocatedJobsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    /**
     * Filter, which AllocatedJobs to fetch.
     */
    where?: AllocatedJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllocatedJobs to fetch.
     */
    orderBy?: AllocatedJobsOrderByWithRelationInput | AllocatedJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AllocatedJobs.
     */
    cursor?: AllocatedJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllocatedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllocatedJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AllocatedJobs.
     */
    distinct?: AllocatedJobsScalarFieldEnum | AllocatedJobsScalarFieldEnum[]
  }

  /**
   * AllocatedJobs findMany
   */
  export type AllocatedJobsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    /**
     * Filter, which AllocatedJobs to fetch.
     */
    where?: AllocatedJobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AllocatedJobs to fetch.
     */
    orderBy?: AllocatedJobsOrderByWithRelationInput | AllocatedJobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AllocatedJobs.
     */
    cursor?: AllocatedJobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AllocatedJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AllocatedJobs.
     */
    skip?: number
    distinct?: AllocatedJobsScalarFieldEnum | AllocatedJobsScalarFieldEnum[]
  }

  /**
   * AllocatedJobs create
   */
  export type AllocatedJobsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    /**
     * The data needed to create a AllocatedJobs.
     */
    data: XOR<AllocatedJobsCreateInput, AllocatedJobsUncheckedCreateInput>
  }

  /**
   * AllocatedJobs createMany
   */
  export type AllocatedJobsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AllocatedJobs.
     */
    data: AllocatedJobsCreateManyInput | AllocatedJobsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AllocatedJobs createManyAndReturn
   */
  export type AllocatedJobsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AllocatedJobs.
     */
    data: AllocatedJobsCreateManyInput | AllocatedJobsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AllocatedJobs update
   */
  export type AllocatedJobsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    /**
     * The data needed to update a AllocatedJobs.
     */
    data: XOR<AllocatedJobsUpdateInput, AllocatedJobsUncheckedUpdateInput>
    /**
     * Choose, which AllocatedJobs to update.
     */
    where: AllocatedJobsWhereUniqueInput
  }

  /**
   * AllocatedJobs updateMany
   */
  export type AllocatedJobsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AllocatedJobs.
     */
    data: XOR<AllocatedJobsUpdateManyMutationInput, AllocatedJobsUncheckedUpdateManyInput>
    /**
     * Filter which AllocatedJobs to update
     */
    where?: AllocatedJobsWhereInput
  }

  /**
   * AllocatedJobs upsert
   */
  export type AllocatedJobsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    /**
     * The filter to search for the AllocatedJobs to update in case it exists.
     */
    where: AllocatedJobsWhereUniqueInput
    /**
     * In case the AllocatedJobs found by the `where` argument doesn't exist, create a new AllocatedJobs with this data.
     */
    create: XOR<AllocatedJobsCreateInput, AllocatedJobsUncheckedCreateInput>
    /**
     * In case the AllocatedJobs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllocatedJobsUpdateInput, AllocatedJobsUncheckedUpdateInput>
  }

  /**
   * AllocatedJobs delete
   */
  export type AllocatedJobsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
    /**
     * Filter which AllocatedJobs to delete.
     */
    where: AllocatedJobsWhereUniqueInput
  }

  /**
   * AllocatedJobs deleteMany
   */
  export type AllocatedJobsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AllocatedJobs to delete
     */
    where?: AllocatedJobsWhereInput
  }

  /**
   * AllocatedJobs without action
   */
  export type AllocatedJobsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllocatedJobs
     */
    select?: AllocatedJobsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocatedJobsInclude<ExtArgs> | null
  }


  /**
   * Model Comments
   */

  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsAvgAggregateOutputType = {
    id: number | null
    jobline_id: number | null
    employee_id: number | null
  }

  export type CommentsSumAggregateOutputType = {
    id: number | null
    jobline_id: number | null
    employee_id: number | null
  }

  export type CommentsMinAggregateOutputType = {
    id: number | null
    type: $Enums.CommentType | null
    comment: string | null
    jobline_id: number | null
    created_at: Date | null
    employee_id: number | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: number | null
    type: $Enums.CommentType | null
    comment: string | null
    jobline_id: number | null
    created_at: Date | null
    employee_id: number | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    type: number
    comment: number
    jobline_id: number
    created_at: number
    employee_id: number
    _all: number
  }


  export type CommentsAvgAggregateInputType = {
    id?: true
    jobline_id?: true
    employee_id?: true
  }

  export type CommentsSumAggregateInputType = {
    id?: true
    jobline_id?: true
    employee_id?: true
  }

  export type CommentsMinAggregateInputType = {
    id?: true
    type?: true
    comment?: true
    jobline_id?: true
    created_at?: true
    employee_id?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    type?: true
    comment?: true
    jobline_id?: true
    created_at?: true
    employee_id?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    type?: true
    comment?: true
    jobline_id?: true
    created_at?: true
    employee_id?: true
    _all?: true
  }

  export type CommentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to aggregate.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type CommentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithAggregationInput | CommentsOrderByWithAggregationInput[]
    by: CommentsScalarFieldEnum[] | CommentsScalarFieldEnum
    having?: CommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _avg?: CommentsAvgAggregateInputType
    _sum?: CommentsSumAggregateInputType
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }

  export type CommentsGroupByOutputType = {
    id: number
    type: $Enums.CommentType
    comment: string
    jobline_id: number
    created_at: Date
    employee_id: number
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type CommentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    comment?: boolean
    jobline_id?: boolean
    created_at?: boolean
    employee_id?: boolean
    joblines?: boolean | JoblinesDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type CommentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    comment?: boolean
    jobline_id?: boolean
    created_at?: boolean
    employee_id?: boolean
    joblines?: boolean | JoblinesDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type CommentsSelectScalar = {
    id?: boolean
    type?: boolean
    comment?: boolean
    jobline_id?: boolean
    created_at?: boolean
    employee_id?: boolean
  }

  export type CommentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joblines?: boolean | JoblinesDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type CommentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joblines?: boolean | JoblinesDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $CommentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comments"
    objects: {
      joblines: Prisma.$JoblinesPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: $Enums.CommentType
      comment: string
      jobline_id: number
      created_at: Date
      employee_id: number
    }, ExtArgs["result"]["comments"]>
    composites: {}
  }

  type CommentsGetPayload<S extends boolean | null | undefined | CommentsDefaultArgs> = $Result.GetResult<Prisma.$CommentsPayload, S>

  type CommentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentsCountAggregateInputType | true
    }

  export interface CommentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comments'], meta: { name: 'Comments' } }
    /**
     * Find zero or one Comments that matches the filter.
     * @param {CommentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentsFindUniqueArgs>(args: SelectSubset<T, CommentsFindUniqueArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentsFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentsFindFirstArgs>(args?: SelectSubset<T, CommentsFindFirstArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentsFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentsFindManyArgs>(args?: SelectSubset<T, CommentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comments.
     * @param {CommentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
     */
    create<T extends CommentsCreateArgs>(args: SelectSubset<T, CommentsCreateArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentsCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comments = await prisma.comments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentsCreateManyArgs>(args?: SelectSubset<T, CommentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentsCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comments = await prisma.comments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentsWithIdOnly = await prisma.comments.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentsCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comments.
     * @param {CommentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
     */
    delete<T extends CommentsDeleteArgs>(args: SelectSubset<T, CommentsDeleteArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comments.
     * @param {CommentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentsUpdateArgs>(args: SelectSubset<T, CommentsUpdateArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentsDeleteManyArgs>(args?: SelectSubset<T, CommentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentsUpdateManyArgs>(args: SelectSubset<T, CommentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {CommentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
     */
    upsert<T extends CommentsUpsertArgs>(args: SelectSubset<T, CommentsUpsertArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentsCountArgs>(
      args?: Subset<T, CommentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): Prisma.PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsGroupByArgs['orderBy'] }
        : { orderBy?: CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comments model
   */
  readonly fields: CommentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    joblines<T extends JoblinesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JoblinesDefaultArgs<ExtArgs>>): Prisma__JoblinesClient<$Result.GetResult<Prisma.$JoblinesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comments model
   */ 
  interface CommentsFieldRefs {
    readonly id: FieldRef<"Comments", 'Int'>
    readonly type: FieldRef<"Comments", 'CommentType'>
    readonly comment: FieldRef<"Comments", 'String'>
    readonly jobline_id: FieldRef<"Comments", 'Int'>
    readonly created_at: FieldRef<"Comments", 'DateTime'>
    readonly employee_id: FieldRef<"Comments", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Comments findUnique
   */
  export type CommentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findUniqueOrThrow
   */
  export type CommentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findFirst
   */
  export type CommentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments findFirstOrThrow
   */
  export type CommentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments findMany
   */
  export type CommentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments create
   */
  export type CommentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Comments.
     */
    data: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
  }

  /**
   * Comments createMany
   */
  export type CommentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentsCreateManyInput | CommentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comments createManyAndReturn
   */
  export type CommentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentsCreateManyInput | CommentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comments update
   */
  export type CommentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Comments.
     */
    data: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
    /**
     * Choose, which Comments to update.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments updateMany
   */
  export type CommentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentsWhereInput
  }

  /**
   * Comments upsert
   */
  export type CommentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Comments to update in case it exists.
     */
    where: CommentsWhereUniqueInput
    /**
     * In case the Comments found by the `where` argument doesn't exist, create a new Comments with this data.
     */
    create: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
    /**
     * In case the Comments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
  }

  /**
   * Comments delete
   */
  export type CommentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter which Comments to delete.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments deleteMany
   */
  export type CommentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentsWhereInput
  }

  /**
   * Comments without action
   */
  export type CommentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    role: 'role',
    active: 'active'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contact_name: 'contact_name',
    contact_number: 'contact_number',
    contact_email: 'contact_email'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const VehiclesScalarFieldEnum: {
    id: 'id',
    vrm: 'vrm',
    vin: 'vin',
    make: 'make',
    model: 'model',
    using_customer_id: 'using_customer_id',
    owning_customer_id: 'owning_customer_id'
  };

  export type VehiclesScalarFieldEnum = (typeof VehiclesScalarFieldEnum)[keyof typeof VehiclesScalarFieldEnum]


  export const JobcardScalarFieldEnum: {
    id: 'id',
    jobcard_number: 'jobcard_number',
    vehicle_id: 'vehicle_id'
  };

  export type JobcardScalarFieldEnum = (typeof JobcardScalarFieldEnum)[keyof typeof JobcardScalarFieldEnum]


  export const JoblinesScalarFieldEnum: {
    id: 'id',
    jobcard_id: 'jobcard_id',
    description: 'description',
    time_allocated: 'time_allocated'
  };

  export type JoblinesScalarFieldEnum = (typeof JoblinesScalarFieldEnum)[keyof typeof JoblinesScalarFieldEnum]


  export const AllocatedJobsScalarFieldEnum: {
    id: 'id',
    jobcard_id: 'jobcard_id',
    employee_id: 'employee_id'
  };

  export type AllocatedJobsScalarFieldEnum = (typeof AllocatedJobsScalarFieldEnum)[keyof typeof AllocatedJobsScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    type: 'type',
    comment: 'comment',
    jobline_id: 'jobline_id',
    created_at: 'created_at',
    employee_id: 'employee_id'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'CommentType'
   */
  export type EnumCommentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommentType'>
    


  /**
   * Reference to a field of type 'CommentType[]'
   */
  export type ListEnumCommentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommentType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: IntFilter<"Employee"> | number
    name?: StringFilter<"Employee"> | string
    role?: EnumRoleFilter<"Employee"> | $Enums.Role
    active?: BoolFilter<"Employee"> | boolean
    allocated_jobs?: AllocatedJobsListRelationFilter
    comments?: CommentsListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    active?: SortOrder
    allocated_jobs?: AllocatedJobsOrderByRelationAggregateInput
    comments?: CommentsOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    name?: StringFilter<"Employee"> | string
    role?: EnumRoleFilter<"Employee"> | $Enums.Role
    active?: BoolFilter<"Employee"> | boolean
    allocated_jobs?: AllocatedJobsListRelationFilter
    comments?: CommentsListRelationFilter
  }, "id">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    active?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employee"> | number
    name?: StringWithAggregatesFilter<"Employee"> | string
    role?: EnumRoleWithAggregatesFilter<"Employee"> | $Enums.Role
    active?: BoolWithAggregatesFilter<"Employee"> | boolean
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: IntFilter<"Customer"> | number
    name?: StringFilter<"Customer"> | string
    contact_name?: StringFilter<"Customer"> | string
    contact_number?: StringFilter<"Customer"> | string
    contact_email?: StringFilter<"Customer"> | string
    using_vehicles?: VehiclesListRelationFilter
    owned_vehicles?: VehiclesListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contact_name?: SortOrder
    contact_number?: SortOrder
    contact_email?: SortOrder
    using_vehicles?: VehiclesOrderByRelationAggregateInput
    owned_vehicles?: VehiclesOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    contact_name?: StringFilter<"Customer"> | string
    contact_number?: StringFilter<"Customer"> | string
    contact_email?: StringFilter<"Customer"> | string
    using_vehicles?: VehiclesListRelationFilter
    owned_vehicles?: VehiclesListRelationFilter
  }, "id">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contact_name?: SortOrder
    contact_number?: SortOrder
    contact_email?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Customer"> | number
    name?: StringWithAggregatesFilter<"Customer"> | string
    contact_name?: StringWithAggregatesFilter<"Customer"> | string
    contact_number?: StringWithAggregatesFilter<"Customer"> | string
    contact_email?: StringWithAggregatesFilter<"Customer"> | string
  }

  export type VehiclesWhereInput = {
    AND?: VehiclesWhereInput | VehiclesWhereInput[]
    OR?: VehiclesWhereInput[]
    NOT?: VehiclesWhereInput | VehiclesWhereInput[]
    id?: IntFilter<"Vehicles"> | number
    vrm?: StringFilter<"Vehicles"> | string
    vin?: StringFilter<"Vehicles"> | string
    make?: StringFilter<"Vehicles"> | string
    model?: StringFilter<"Vehicles"> | string
    using_customer_id?: IntFilter<"Vehicles"> | number
    owning_customer_id?: IntFilter<"Vehicles"> | number
    using_customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    owning_customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    Jobcard?: JobcardListRelationFilter
  }

  export type VehiclesOrderByWithRelationInput = {
    id?: SortOrder
    vrm?: SortOrder
    vin?: SortOrder
    make?: SortOrder
    model?: SortOrder
    using_customer_id?: SortOrder
    owning_customer_id?: SortOrder
    using_customer?: CustomerOrderByWithRelationInput
    owning_customer?: CustomerOrderByWithRelationInput
    Jobcard?: JobcardOrderByRelationAggregateInput
  }

  export type VehiclesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VehiclesWhereInput | VehiclesWhereInput[]
    OR?: VehiclesWhereInput[]
    NOT?: VehiclesWhereInput | VehiclesWhereInput[]
    vrm?: StringFilter<"Vehicles"> | string
    vin?: StringFilter<"Vehicles"> | string
    make?: StringFilter<"Vehicles"> | string
    model?: StringFilter<"Vehicles"> | string
    using_customer_id?: IntFilter<"Vehicles"> | number
    owning_customer_id?: IntFilter<"Vehicles"> | number
    using_customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    owning_customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    Jobcard?: JobcardListRelationFilter
  }, "id">

  export type VehiclesOrderByWithAggregationInput = {
    id?: SortOrder
    vrm?: SortOrder
    vin?: SortOrder
    make?: SortOrder
    model?: SortOrder
    using_customer_id?: SortOrder
    owning_customer_id?: SortOrder
    _count?: VehiclesCountOrderByAggregateInput
    _avg?: VehiclesAvgOrderByAggregateInput
    _max?: VehiclesMaxOrderByAggregateInput
    _min?: VehiclesMinOrderByAggregateInput
    _sum?: VehiclesSumOrderByAggregateInput
  }

  export type VehiclesScalarWhereWithAggregatesInput = {
    AND?: VehiclesScalarWhereWithAggregatesInput | VehiclesScalarWhereWithAggregatesInput[]
    OR?: VehiclesScalarWhereWithAggregatesInput[]
    NOT?: VehiclesScalarWhereWithAggregatesInput | VehiclesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vehicles"> | number
    vrm?: StringWithAggregatesFilter<"Vehicles"> | string
    vin?: StringWithAggregatesFilter<"Vehicles"> | string
    make?: StringWithAggregatesFilter<"Vehicles"> | string
    model?: StringWithAggregatesFilter<"Vehicles"> | string
    using_customer_id?: IntWithAggregatesFilter<"Vehicles"> | number
    owning_customer_id?: IntWithAggregatesFilter<"Vehicles"> | number
  }

  export type JobcardWhereInput = {
    AND?: JobcardWhereInput | JobcardWhereInput[]
    OR?: JobcardWhereInput[]
    NOT?: JobcardWhereInput | JobcardWhereInput[]
    id?: IntFilter<"Jobcard"> | number
    jobcard_number?: IntFilter<"Jobcard"> | number
    vehicle_id?: IntFilter<"Jobcard"> | number
    vehicle?: XOR<VehiclesRelationFilter, VehiclesWhereInput>
    joblines?: JoblinesListRelationFilter
    allocated_jobs?: AllocatedJobsListRelationFilter
  }

  export type JobcardOrderByWithRelationInput = {
    id?: SortOrder
    jobcard_number?: SortOrder
    vehicle_id?: SortOrder
    vehicle?: VehiclesOrderByWithRelationInput
    joblines?: JoblinesOrderByRelationAggregateInput
    allocated_jobs?: AllocatedJobsOrderByRelationAggregateInput
  }

  export type JobcardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    jobcard_number?: number
    AND?: JobcardWhereInput | JobcardWhereInput[]
    OR?: JobcardWhereInput[]
    NOT?: JobcardWhereInput | JobcardWhereInput[]
    vehicle_id?: IntFilter<"Jobcard"> | number
    vehicle?: XOR<VehiclesRelationFilter, VehiclesWhereInput>
    joblines?: JoblinesListRelationFilter
    allocated_jobs?: AllocatedJobsListRelationFilter
  }, "id" | "jobcard_number">

  export type JobcardOrderByWithAggregationInput = {
    id?: SortOrder
    jobcard_number?: SortOrder
    vehicle_id?: SortOrder
    _count?: JobcardCountOrderByAggregateInput
    _avg?: JobcardAvgOrderByAggregateInput
    _max?: JobcardMaxOrderByAggregateInput
    _min?: JobcardMinOrderByAggregateInput
    _sum?: JobcardSumOrderByAggregateInput
  }

  export type JobcardScalarWhereWithAggregatesInput = {
    AND?: JobcardScalarWhereWithAggregatesInput | JobcardScalarWhereWithAggregatesInput[]
    OR?: JobcardScalarWhereWithAggregatesInput[]
    NOT?: JobcardScalarWhereWithAggregatesInput | JobcardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Jobcard"> | number
    jobcard_number?: IntWithAggregatesFilter<"Jobcard"> | number
    vehicle_id?: IntWithAggregatesFilter<"Jobcard"> | number
  }

  export type JoblinesWhereInput = {
    AND?: JoblinesWhereInput | JoblinesWhereInput[]
    OR?: JoblinesWhereInput[]
    NOT?: JoblinesWhereInput | JoblinesWhereInput[]
    id?: IntFilter<"Joblines"> | number
    jobcard_id?: IntFilter<"Joblines"> | number
    description?: StringFilter<"Joblines"> | string
    time_allocated?: FloatFilter<"Joblines"> | number
    jobcard_number?: XOR<JobcardRelationFilter, JobcardWhereInput>
    comments?: CommentsListRelationFilter
  }

  export type JoblinesOrderByWithRelationInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    description?: SortOrder
    time_allocated?: SortOrder
    jobcard_number?: JobcardOrderByWithRelationInput
    comments?: CommentsOrderByRelationAggregateInput
  }

  export type JoblinesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JoblinesWhereInput | JoblinesWhereInput[]
    OR?: JoblinesWhereInput[]
    NOT?: JoblinesWhereInput | JoblinesWhereInput[]
    jobcard_id?: IntFilter<"Joblines"> | number
    description?: StringFilter<"Joblines"> | string
    time_allocated?: FloatFilter<"Joblines"> | number
    jobcard_number?: XOR<JobcardRelationFilter, JobcardWhereInput>
    comments?: CommentsListRelationFilter
  }, "id">

  export type JoblinesOrderByWithAggregationInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    description?: SortOrder
    time_allocated?: SortOrder
    _count?: JoblinesCountOrderByAggregateInput
    _avg?: JoblinesAvgOrderByAggregateInput
    _max?: JoblinesMaxOrderByAggregateInput
    _min?: JoblinesMinOrderByAggregateInput
    _sum?: JoblinesSumOrderByAggregateInput
  }

  export type JoblinesScalarWhereWithAggregatesInput = {
    AND?: JoblinesScalarWhereWithAggregatesInput | JoblinesScalarWhereWithAggregatesInput[]
    OR?: JoblinesScalarWhereWithAggregatesInput[]
    NOT?: JoblinesScalarWhereWithAggregatesInput | JoblinesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Joblines"> | number
    jobcard_id?: IntWithAggregatesFilter<"Joblines"> | number
    description?: StringWithAggregatesFilter<"Joblines"> | string
    time_allocated?: FloatWithAggregatesFilter<"Joblines"> | number
  }

  export type AllocatedJobsWhereInput = {
    AND?: AllocatedJobsWhereInput | AllocatedJobsWhereInput[]
    OR?: AllocatedJobsWhereInput[]
    NOT?: AllocatedJobsWhereInput | AllocatedJobsWhereInput[]
    id?: IntFilter<"AllocatedJobs"> | number
    jobcard_id?: IntFilter<"AllocatedJobs"> | number
    employee_id?: IntFilter<"AllocatedJobs"> | number
    jobcard?: XOR<JobcardRelationFilter, JobcardWhereInput>
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type AllocatedJobsOrderByWithRelationInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    employee_id?: SortOrder
    jobcard?: JobcardOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
  }

  export type AllocatedJobsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AllocatedJobsWhereInput | AllocatedJobsWhereInput[]
    OR?: AllocatedJobsWhereInput[]
    NOT?: AllocatedJobsWhereInput | AllocatedJobsWhereInput[]
    jobcard_id?: IntFilter<"AllocatedJobs"> | number
    employee_id?: IntFilter<"AllocatedJobs"> | number
    jobcard?: XOR<JobcardRelationFilter, JobcardWhereInput>
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type AllocatedJobsOrderByWithAggregationInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    employee_id?: SortOrder
    _count?: AllocatedJobsCountOrderByAggregateInput
    _avg?: AllocatedJobsAvgOrderByAggregateInput
    _max?: AllocatedJobsMaxOrderByAggregateInput
    _min?: AllocatedJobsMinOrderByAggregateInput
    _sum?: AllocatedJobsSumOrderByAggregateInput
  }

  export type AllocatedJobsScalarWhereWithAggregatesInput = {
    AND?: AllocatedJobsScalarWhereWithAggregatesInput | AllocatedJobsScalarWhereWithAggregatesInput[]
    OR?: AllocatedJobsScalarWhereWithAggregatesInput[]
    NOT?: AllocatedJobsScalarWhereWithAggregatesInput | AllocatedJobsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AllocatedJobs"> | number
    jobcard_id?: IntWithAggregatesFilter<"AllocatedJobs"> | number
    employee_id?: IntWithAggregatesFilter<"AllocatedJobs"> | number
  }

  export type CommentsWhereInput = {
    AND?: CommentsWhereInput | CommentsWhereInput[]
    OR?: CommentsWhereInput[]
    NOT?: CommentsWhereInput | CommentsWhereInput[]
    id?: IntFilter<"Comments"> | number
    type?: EnumCommentTypeFilter<"Comments"> | $Enums.CommentType
    comment?: StringFilter<"Comments"> | string
    jobline_id?: IntFilter<"Comments"> | number
    created_at?: DateTimeFilter<"Comments"> | Date | string
    employee_id?: IntFilter<"Comments"> | number
    joblines?: XOR<JoblinesRelationFilter, JoblinesWhereInput>
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type CommentsOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    comment?: SortOrder
    jobline_id?: SortOrder
    created_at?: SortOrder
    employee_id?: SortOrder
    joblines?: JoblinesOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
  }

  export type CommentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentsWhereInput | CommentsWhereInput[]
    OR?: CommentsWhereInput[]
    NOT?: CommentsWhereInput | CommentsWhereInput[]
    type?: EnumCommentTypeFilter<"Comments"> | $Enums.CommentType
    comment?: StringFilter<"Comments"> | string
    jobline_id?: IntFilter<"Comments"> | number
    created_at?: DateTimeFilter<"Comments"> | Date | string
    employee_id?: IntFilter<"Comments"> | number
    joblines?: XOR<JoblinesRelationFilter, JoblinesWhereInput>
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type CommentsOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    comment?: SortOrder
    jobline_id?: SortOrder
    created_at?: SortOrder
    employee_id?: SortOrder
    _count?: CommentsCountOrderByAggregateInput
    _avg?: CommentsAvgOrderByAggregateInput
    _max?: CommentsMaxOrderByAggregateInput
    _min?: CommentsMinOrderByAggregateInput
    _sum?: CommentsSumOrderByAggregateInput
  }

  export type CommentsScalarWhereWithAggregatesInput = {
    AND?: CommentsScalarWhereWithAggregatesInput | CommentsScalarWhereWithAggregatesInput[]
    OR?: CommentsScalarWhereWithAggregatesInput[]
    NOT?: CommentsScalarWhereWithAggregatesInput | CommentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comments"> | number
    type?: EnumCommentTypeWithAggregatesFilter<"Comments"> | $Enums.CommentType
    comment?: StringWithAggregatesFilter<"Comments"> | string
    jobline_id?: IntWithAggregatesFilter<"Comments"> | number
    created_at?: DateTimeWithAggregatesFilter<"Comments"> | Date | string
    employee_id?: IntWithAggregatesFilter<"Comments"> | number
  }

  export type EmployeeCreateInput = {
    name: string
    role: $Enums.Role
    active: boolean
    allocated_jobs?: AllocatedJobsCreateNestedManyWithoutEmployeeInput
    comments?: CommentsCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    name: string
    role: $Enums.Role
    active: boolean
    allocated_jobs?: AllocatedJobsUncheckedCreateNestedManyWithoutEmployeeInput
    comments?: CommentsUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    active?: BoolFieldUpdateOperationsInput | boolean
    allocated_jobs?: AllocatedJobsUpdateManyWithoutEmployeeNestedInput
    comments?: CommentsUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    active?: BoolFieldUpdateOperationsInput | boolean
    allocated_jobs?: AllocatedJobsUncheckedUpdateManyWithoutEmployeeNestedInput
    comments?: CommentsUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: number
    name: string
    role: $Enums.Role
    active: boolean
  }

  export type EmployeeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CustomerCreateInput = {
    name: string
    contact_name: string
    contact_number: string
    contact_email: string
    using_vehicles?: VehiclesCreateNestedManyWithoutUsing_customerInput
    owned_vehicles?: VehiclesCreateNestedManyWithoutOwning_customerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    name: string
    contact_name: string
    contact_number: string
    contact_email: string
    using_vehicles?: VehiclesUncheckedCreateNestedManyWithoutUsing_customerInput
    owned_vehicles?: VehiclesUncheckedCreateNestedManyWithoutOwning_customerInput
  }

  export type CustomerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    contact_email?: StringFieldUpdateOperationsInput | string
    using_vehicles?: VehiclesUpdateManyWithoutUsing_customerNestedInput
    owned_vehicles?: VehiclesUpdateManyWithoutOwning_customerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    contact_email?: StringFieldUpdateOperationsInput | string
    using_vehicles?: VehiclesUncheckedUpdateManyWithoutUsing_customerNestedInput
    owned_vehicles?: VehiclesUncheckedUpdateManyWithoutOwning_customerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    name: string
    contact_name: string
    contact_number: string
    contact_email: string
  }

  export type CustomerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    contact_email?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    contact_email?: StringFieldUpdateOperationsInput | string
  }

  export type VehiclesCreateInput = {
    vrm: string
    vin: string
    make: string
    model: string
    using_customer: CustomerCreateNestedOneWithoutUsing_vehiclesInput
    owning_customer: CustomerCreateNestedOneWithoutOwned_vehiclesInput
    Jobcard?: JobcardCreateNestedManyWithoutVehicleInput
  }

  export type VehiclesUncheckedCreateInput = {
    id?: number
    vrm: string
    vin: string
    make: string
    model: string
    using_customer_id: number
    owning_customer_id: number
    Jobcard?: JobcardUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehiclesUpdateInput = {
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    using_customer?: CustomerUpdateOneRequiredWithoutUsing_vehiclesNestedInput
    owning_customer?: CustomerUpdateOneRequiredWithoutOwned_vehiclesNestedInput
    Jobcard?: JobcardUpdateManyWithoutVehicleNestedInput
  }

  export type VehiclesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    using_customer_id?: IntFieldUpdateOperationsInput | number
    owning_customer_id?: IntFieldUpdateOperationsInput | number
    Jobcard?: JobcardUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type VehiclesCreateManyInput = {
    id?: number
    vrm: string
    vin: string
    make: string
    model: string
    using_customer_id: number
    owning_customer_id: number
  }

  export type VehiclesUpdateManyMutationInput = {
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
  }

  export type VehiclesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    using_customer_id?: IntFieldUpdateOperationsInput | number
    owning_customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type JobcardCreateInput = {
    jobcard_number: number
    vehicle: VehiclesCreateNestedOneWithoutJobcardInput
    joblines?: JoblinesCreateNestedManyWithoutJobcard_numberInput
    allocated_jobs?: AllocatedJobsCreateNestedManyWithoutJobcardInput
  }

  export type JobcardUncheckedCreateInput = {
    id?: number
    jobcard_number: number
    vehicle_id: number
    joblines?: JoblinesUncheckedCreateNestedManyWithoutJobcard_numberInput
    allocated_jobs?: AllocatedJobsUncheckedCreateNestedManyWithoutJobcardInput
  }

  export type JobcardUpdateInput = {
    jobcard_number?: IntFieldUpdateOperationsInput | number
    vehicle?: VehiclesUpdateOneRequiredWithoutJobcardNestedInput
    joblines?: JoblinesUpdateManyWithoutJobcard_numberNestedInput
    allocated_jobs?: AllocatedJobsUpdateManyWithoutJobcardNestedInput
  }

  export type JobcardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_number?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
    joblines?: JoblinesUncheckedUpdateManyWithoutJobcard_numberNestedInput
    allocated_jobs?: AllocatedJobsUncheckedUpdateManyWithoutJobcardNestedInput
  }

  export type JobcardCreateManyInput = {
    id?: number
    jobcard_number: number
    vehicle_id: number
  }

  export type JobcardUpdateManyMutationInput = {
    jobcard_number?: IntFieldUpdateOperationsInput | number
  }

  export type JobcardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_number?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
  }

  export type JoblinesCreateInput = {
    description: string
    time_allocated: number
    jobcard_number: JobcardCreateNestedOneWithoutJoblinesInput
    comments?: CommentsCreateNestedManyWithoutJoblinesInput
  }

  export type JoblinesUncheckedCreateInput = {
    id?: number
    jobcard_id: number
    description: string
    time_allocated: number
    comments?: CommentsUncheckedCreateNestedManyWithoutJoblinesInput
  }

  export type JoblinesUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    time_allocated?: FloatFieldUpdateOperationsInput | number
    jobcard_number?: JobcardUpdateOneRequiredWithoutJoblinesNestedInput
    comments?: CommentsUpdateManyWithoutJoblinesNestedInput
  }

  export type JoblinesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    time_allocated?: FloatFieldUpdateOperationsInput | number
    comments?: CommentsUncheckedUpdateManyWithoutJoblinesNestedInput
  }

  export type JoblinesCreateManyInput = {
    id?: number
    jobcard_id: number
    description: string
    time_allocated: number
  }

  export type JoblinesUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    time_allocated?: FloatFieldUpdateOperationsInput | number
  }

  export type JoblinesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    time_allocated?: FloatFieldUpdateOperationsInput | number
  }

  export type AllocatedJobsCreateInput = {
    jobcard: JobcardCreateNestedOneWithoutAllocated_jobsInput
    employee: EmployeeCreateNestedOneWithoutAllocated_jobsInput
  }

  export type AllocatedJobsUncheckedCreateInput = {
    id?: number
    jobcard_id: number
    employee_id: number
  }

  export type AllocatedJobsUpdateInput = {
    jobcard?: JobcardUpdateOneRequiredWithoutAllocated_jobsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutAllocated_jobsNestedInput
  }

  export type AllocatedJobsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_id?: IntFieldUpdateOperationsInput | number
    employee_id?: IntFieldUpdateOperationsInput | number
  }

  export type AllocatedJobsCreateManyInput = {
    id?: number
    jobcard_id: number
    employee_id: number
  }

  export type AllocatedJobsUpdateManyMutationInput = {

  }

  export type AllocatedJobsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_id?: IntFieldUpdateOperationsInput | number
    employee_id?: IntFieldUpdateOperationsInput | number
  }

  export type CommentsCreateInput = {
    type: $Enums.CommentType
    comment: string
    created_at: Date | string
    joblines: JoblinesCreateNestedOneWithoutCommentsInput
    employee: EmployeeCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateInput = {
    id?: number
    type: $Enums.CommentType
    comment: string
    jobline_id: number
    created_at: Date | string
    employee_id: number
  }

  export type CommentsUpdateInput = {
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    joblines?: JoblinesUpdateOneRequiredWithoutCommentsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    jobline_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_id?: IntFieldUpdateOperationsInput | number
  }

  export type CommentsCreateManyInput = {
    id?: number
    type: $Enums.CommentType
    comment: string
    jobline_id: number
    created_at: Date | string
    employee_id: number
  }

  export type CommentsUpdateManyMutationInput = {
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    jobline_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AllocatedJobsListRelationFilter = {
    every?: AllocatedJobsWhereInput
    some?: AllocatedJobsWhereInput
    none?: AllocatedJobsWhereInput
  }

  export type CommentsListRelationFilter = {
    every?: CommentsWhereInput
    some?: CommentsWhereInput
    none?: CommentsWhereInput
  }

  export type AllocatedJobsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    active?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    active?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    active?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type VehiclesListRelationFilter = {
    every?: VehiclesWhereInput
    some?: VehiclesWhereInput
    none?: VehiclesWhereInput
  }

  export type VehiclesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_name?: SortOrder
    contact_number?: SortOrder
    contact_email?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_name?: SortOrder
    contact_number?: SortOrder
    contact_email?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_name?: SortOrder
    contact_number?: SortOrder
    contact_email?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type JobcardListRelationFilter = {
    every?: JobcardWhereInput
    some?: JobcardWhereInput
    none?: JobcardWhereInput
  }

  export type JobcardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VehiclesCountOrderByAggregateInput = {
    id?: SortOrder
    vrm?: SortOrder
    vin?: SortOrder
    make?: SortOrder
    model?: SortOrder
    using_customer_id?: SortOrder
    owning_customer_id?: SortOrder
  }

  export type VehiclesAvgOrderByAggregateInput = {
    id?: SortOrder
    using_customer_id?: SortOrder
    owning_customer_id?: SortOrder
  }

  export type VehiclesMaxOrderByAggregateInput = {
    id?: SortOrder
    vrm?: SortOrder
    vin?: SortOrder
    make?: SortOrder
    model?: SortOrder
    using_customer_id?: SortOrder
    owning_customer_id?: SortOrder
  }

  export type VehiclesMinOrderByAggregateInput = {
    id?: SortOrder
    vrm?: SortOrder
    vin?: SortOrder
    make?: SortOrder
    model?: SortOrder
    using_customer_id?: SortOrder
    owning_customer_id?: SortOrder
  }

  export type VehiclesSumOrderByAggregateInput = {
    id?: SortOrder
    using_customer_id?: SortOrder
    owning_customer_id?: SortOrder
  }

  export type VehiclesRelationFilter = {
    is?: VehiclesWhereInput
    isNot?: VehiclesWhereInput
  }

  export type JoblinesListRelationFilter = {
    every?: JoblinesWhereInput
    some?: JoblinesWhereInput
    none?: JoblinesWhereInput
  }

  export type JoblinesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobcardCountOrderByAggregateInput = {
    id?: SortOrder
    jobcard_number?: SortOrder
    vehicle_id?: SortOrder
  }

  export type JobcardAvgOrderByAggregateInput = {
    id?: SortOrder
    jobcard_number?: SortOrder
    vehicle_id?: SortOrder
  }

  export type JobcardMaxOrderByAggregateInput = {
    id?: SortOrder
    jobcard_number?: SortOrder
    vehicle_id?: SortOrder
  }

  export type JobcardMinOrderByAggregateInput = {
    id?: SortOrder
    jobcard_number?: SortOrder
    vehicle_id?: SortOrder
  }

  export type JobcardSumOrderByAggregateInput = {
    id?: SortOrder
    jobcard_number?: SortOrder
    vehicle_id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type JobcardRelationFilter = {
    is?: JobcardWhereInput
    isNot?: JobcardWhereInput
  }

  export type JoblinesCountOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    description?: SortOrder
    time_allocated?: SortOrder
  }

  export type JoblinesAvgOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    time_allocated?: SortOrder
  }

  export type JoblinesMaxOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    description?: SortOrder
    time_allocated?: SortOrder
  }

  export type JoblinesMinOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    description?: SortOrder
    time_allocated?: SortOrder
  }

  export type JoblinesSumOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    time_allocated?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type AllocatedJobsCountOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    employee_id?: SortOrder
  }

  export type AllocatedJobsAvgOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    employee_id?: SortOrder
  }

  export type AllocatedJobsMaxOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    employee_id?: SortOrder
  }

  export type AllocatedJobsMinOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    employee_id?: SortOrder
  }

  export type AllocatedJobsSumOrderByAggregateInput = {
    id?: SortOrder
    jobcard_id?: SortOrder
    employee_id?: SortOrder
  }

  export type EnumCommentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentType | EnumCommentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommentType[] | ListEnumCommentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommentType[] | ListEnumCommentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommentTypeFilter<$PrismaModel> | $Enums.CommentType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type JoblinesRelationFilter = {
    is?: JoblinesWhereInput
    isNot?: JoblinesWhereInput
  }

  export type CommentsCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    comment?: SortOrder
    jobline_id?: SortOrder
    created_at?: SortOrder
    employee_id?: SortOrder
  }

  export type CommentsAvgOrderByAggregateInput = {
    id?: SortOrder
    jobline_id?: SortOrder
    employee_id?: SortOrder
  }

  export type CommentsMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    comment?: SortOrder
    jobline_id?: SortOrder
    created_at?: SortOrder
    employee_id?: SortOrder
  }

  export type CommentsMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    comment?: SortOrder
    jobline_id?: SortOrder
    created_at?: SortOrder
    employee_id?: SortOrder
  }

  export type CommentsSumOrderByAggregateInput = {
    id?: SortOrder
    jobline_id?: SortOrder
    employee_id?: SortOrder
  }

  export type EnumCommentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentType | EnumCommentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommentType[] | ListEnumCommentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommentType[] | ListEnumCommentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommentTypeWithAggregatesFilter<$PrismaModel> | $Enums.CommentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommentTypeFilter<$PrismaModel>
    _max?: NestedEnumCommentTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AllocatedJobsCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<AllocatedJobsCreateWithoutEmployeeInput, AllocatedJobsUncheckedCreateWithoutEmployeeInput> | AllocatedJobsCreateWithoutEmployeeInput[] | AllocatedJobsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AllocatedJobsCreateOrConnectWithoutEmployeeInput | AllocatedJobsCreateOrConnectWithoutEmployeeInput[]
    createMany?: AllocatedJobsCreateManyEmployeeInputEnvelope
    connect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
  }

  export type CommentsCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<CommentsCreateWithoutEmployeeInput, CommentsUncheckedCreateWithoutEmployeeInput> | CommentsCreateWithoutEmployeeInput[] | CommentsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutEmployeeInput | CommentsCreateOrConnectWithoutEmployeeInput[]
    createMany?: CommentsCreateManyEmployeeInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type AllocatedJobsUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<AllocatedJobsCreateWithoutEmployeeInput, AllocatedJobsUncheckedCreateWithoutEmployeeInput> | AllocatedJobsCreateWithoutEmployeeInput[] | AllocatedJobsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AllocatedJobsCreateOrConnectWithoutEmployeeInput | AllocatedJobsCreateOrConnectWithoutEmployeeInput[]
    createMany?: AllocatedJobsCreateManyEmployeeInputEnvelope
    connect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<CommentsCreateWithoutEmployeeInput, CommentsUncheckedCreateWithoutEmployeeInput> | CommentsCreateWithoutEmployeeInput[] | CommentsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutEmployeeInput | CommentsCreateOrConnectWithoutEmployeeInput[]
    createMany?: CommentsCreateManyEmployeeInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AllocatedJobsUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<AllocatedJobsCreateWithoutEmployeeInput, AllocatedJobsUncheckedCreateWithoutEmployeeInput> | AllocatedJobsCreateWithoutEmployeeInput[] | AllocatedJobsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AllocatedJobsCreateOrConnectWithoutEmployeeInput | AllocatedJobsCreateOrConnectWithoutEmployeeInput[]
    upsert?: AllocatedJobsUpsertWithWhereUniqueWithoutEmployeeInput | AllocatedJobsUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: AllocatedJobsCreateManyEmployeeInputEnvelope
    set?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    disconnect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    delete?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    connect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    update?: AllocatedJobsUpdateWithWhereUniqueWithoutEmployeeInput | AllocatedJobsUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: AllocatedJobsUpdateManyWithWhereWithoutEmployeeInput | AllocatedJobsUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: AllocatedJobsScalarWhereInput | AllocatedJobsScalarWhereInput[]
  }

  export type CommentsUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<CommentsCreateWithoutEmployeeInput, CommentsUncheckedCreateWithoutEmployeeInput> | CommentsCreateWithoutEmployeeInput[] | CommentsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutEmployeeInput | CommentsCreateOrConnectWithoutEmployeeInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutEmployeeInput | CommentsUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: CommentsCreateManyEmployeeInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutEmployeeInput | CommentsUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutEmployeeInput | CommentsUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AllocatedJobsUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<AllocatedJobsCreateWithoutEmployeeInput, AllocatedJobsUncheckedCreateWithoutEmployeeInput> | AllocatedJobsCreateWithoutEmployeeInput[] | AllocatedJobsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AllocatedJobsCreateOrConnectWithoutEmployeeInput | AllocatedJobsCreateOrConnectWithoutEmployeeInput[]
    upsert?: AllocatedJobsUpsertWithWhereUniqueWithoutEmployeeInput | AllocatedJobsUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: AllocatedJobsCreateManyEmployeeInputEnvelope
    set?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    disconnect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    delete?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    connect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    update?: AllocatedJobsUpdateWithWhereUniqueWithoutEmployeeInput | AllocatedJobsUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: AllocatedJobsUpdateManyWithWhereWithoutEmployeeInput | AllocatedJobsUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: AllocatedJobsScalarWhereInput | AllocatedJobsScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<CommentsCreateWithoutEmployeeInput, CommentsUncheckedCreateWithoutEmployeeInput> | CommentsCreateWithoutEmployeeInput[] | CommentsUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutEmployeeInput | CommentsCreateOrConnectWithoutEmployeeInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutEmployeeInput | CommentsUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: CommentsCreateManyEmployeeInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutEmployeeInput | CommentsUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutEmployeeInput | CommentsUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type VehiclesCreateNestedManyWithoutUsing_customerInput = {
    create?: XOR<VehiclesCreateWithoutUsing_customerInput, VehiclesUncheckedCreateWithoutUsing_customerInput> | VehiclesCreateWithoutUsing_customerInput[] | VehiclesUncheckedCreateWithoutUsing_customerInput[]
    connectOrCreate?: VehiclesCreateOrConnectWithoutUsing_customerInput | VehiclesCreateOrConnectWithoutUsing_customerInput[]
    createMany?: VehiclesCreateManyUsing_customerInputEnvelope
    connect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
  }

  export type VehiclesCreateNestedManyWithoutOwning_customerInput = {
    create?: XOR<VehiclesCreateWithoutOwning_customerInput, VehiclesUncheckedCreateWithoutOwning_customerInput> | VehiclesCreateWithoutOwning_customerInput[] | VehiclesUncheckedCreateWithoutOwning_customerInput[]
    connectOrCreate?: VehiclesCreateOrConnectWithoutOwning_customerInput | VehiclesCreateOrConnectWithoutOwning_customerInput[]
    createMany?: VehiclesCreateManyOwning_customerInputEnvelope
    connect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
  }

  export type VehiclesUncheckedCreateNestedManyWithoutUsing_customerInput = {
    create?: XOR<VehiclesCreateWithoutUsing_customerInput, VehiclesUncheckedCreateWithoutUsing_customerInput> | VehiclesCreateWithoutUsing_customerInput[] | VehiclesUncheckedCreateWithoutUsing_customerInput[]
    connectOrCreate?: VehiclesCreateOrConnectWithoutUsing_customerInput | VehiclesCreateOrConnectWithoutUsing_customerInput[]
    createMany?: VehiclesCreateManyUsing_customerInputEnvelope
    connect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
  }

  export type VehiclesUncheckedCreateNestedManyWithoutOwning_customerInput = {
    create?: XOR<VehiclesCreateWithoutOwning_customerInput, VehiclesUncheckedCreateWithoutOwning_customerInput> | VehiclesCreateWithoutOwning_customerInput[] | VehiclesUncheckedCreateWithoutOwning_customerInput[]
    connectOrCreate?: VehiclesCreateOrConnectWithoutOwning_customerInput | VehiclesCreateOrConnectWithoutOwning_customerInput[]
    createMany?: VehiclesCreateManyOwning_customerInputEnvelope
    connect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
  }

  export type VehiclesUpdateManyWithoutUsing_customerNestedInput = {
    create?: XOR<VehiclesCreateWithoutUsing_customerInput, VehiclesUncheckedCreateWithoutUsing_customerInput> | VehiclesCreateWithoutUsing_customerInput[] | VehiclesUncheckedCreateWithoutUsing_customerInput[]
    connectOrCreate?: VehiclesCreateOrConnectWithoutUsing_customerInput | VehiclesCreateOrConnectWithoutUsing_customerInput[]
    upsert?: VehiclesUpsertWithWhereUniqueWithoutUsing_customerInput | VehiclesUpsertWithWhereUniqueWithoutUsing_customerInput[]
    createMany?: VehiclesCreateManyUsing_customerInputEnvelope
    set?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    disconnect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    delete?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    connect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    update?: VehiclesUpdateWithWhereUniqueWithoutUsing_customerInput | VehiclesUpdateWithWhereUniqueWithoutUsing_customerInput[]
    updateMany?: VehiclesUpdateManyWithWhereWithoutUsing_customerInput | VehiclesUpdateManyWithWhereWithoutUsing_customerInput[]
    deleteMany?: VehiclesScalarWhereInput | VehiclesScalarWhereInput[]
  }

  export type VehiclesUpdateManyWithoutOwning_customerNestedInput = {
    create?: XOR<VehiclesCreateWithoutOwning_customerInput, VehiclesUncheckedCreateWithoutOwning_customerInput> | VehiclesCreateWithoutOwning_customerInput[] | VehiclesUncheckedCreateWithoutOwning_customerInput[]
    connectOrCreate?: VehiclesCreateOrConnectWithoutOwning_customerInput | VehiclesCreateOrConnectWithoutOwning_customerInput[]
    upsert?: VehiclesUpsertWithWhereUniqueWithoutOwning_customerInput | VehiclesUpsertWithWhereUniqueWithoutOwning_customerInput[]
    createMany?: VehiclesCreateManyOwning_customerInputEnvelope
    set?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    disconnect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    delete?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    connect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    update?: VehiclesUpdateWithWhereUniqueWithoutOwning_customerInput | VehiclesUpdateWithWhereUniqueWithoutOwning_customerInput[]
    updateMany?: VehiclesUpdateManyWithWhereWithoutOwning_customerInput | VehiclesUpdateManyWithWhereWithoutOwning_customerInput[]
    deleteMany?: VehiclesScalarWhereInput | VehiclesScalarWhereInput[]
  }

  export type VehiclesUncheckedUpdateManyWithoutUsing_customerNestedInput = {
    create?: XOR<VehiclesCreateWithoutUsing_customerInput, VehiclesUncheckedCreateWithoutUsing_customerInput> | VehiclesCreateWithoutUsing_customerInput[] | VehiclesUncheckedCreateWithoutUsing_customerInput[]
    connectOrCreate?: VehiclesCreateOrConnectWithoutUsing_customerInput | VehiclesCreateOrConnectWithoutUsing_customerInput[]
    upsert?: VehiclesUpsertWithWhereUniqueWithoutUsing_customerInput | VehiclesUpsertWithWhereUniqueWithoutUsing_customerInput[]
    createMany?: VehiclesCreateManyUsing_customerInputEnvelope
    set?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    disconnect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    delete?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    connect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    update?: VehiclesUpdateWithWhereUniqueWithoutUsing_customerInput | VehiclesUpdateWithWhereUniqueWithoutUsing_customerInput[]
    updateMany?: VehiclesUpdateManyWithWhereWithoutUsing_customerInput | VehiclesUpdateManyWithWhereWithoutUsing_customerInput[]
    deleteMany?: VehiclesScalarWhereInput | VehiclesScalarWhereInput[]
  }

  export type VehiclesUncheckedUpdateManyWithoutOwning_customerNestedInput = {
    create?: XOR<VehiclesCreateWithoutOwning_customerInput, VehiclesUncheckedCreateWithoutOwning_customerInput> | VehiclesCreateWithoutOwning_customerInput[] | VehiclesUncheckedCreateWithoutOwning_customerInput[]
    connectOrCreate?: VehiclesCreateOrConnectWithoutOwning_customerInput | VehiclesCreateOrConnectWithoutOwning_customerInput[]
    upsert?: VehiclesUpsertWithWhereUniqueWithoutOwning_customerInput | VehiclesUpsertWithWhereUniqueWithoutOwning_customerInput[]
    createMany?: VehiclesCreateManyOwning_customerInputEnvelope
    set?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    disconnect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    delete?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    connect?: VehiclesWhereUniqueInput | VehiclesWhereUniqueInput[]
    update?: VehiclesUpdateWithWhereUniqueWithoutOwning_customerInput | VehiclesUpdateWithWhereUniqueWithoutOwning_customerInput[]
    updateMany?: VehiclesUpdateManyWithWhereWithoutOwning_customerInput | VehiclesUpdateManyWithWhereWithoutOwning_customerInput[]
    deleteMany?: VehiclesScalarWhereInput | VehiclesScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutUsing_vehiclesInput = {
    create?: XOR<CustomerCreateWithoutUsing_vehiclesInput, CustomerUncheckedCreateWithoutUsing_vehiclesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUsing_vehiclesInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutOwned_vehiclesInput = {
    create?: XOR<CustomerCreateWithoutOwned_vehiclesInput, CustomerUncheckedCreateWithoutOwned_vehiclesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutOwned_vehiclesInput
    connect?: CustomerWhereUniqueInput
  }

  export type JobcardCreateNestedManyWithoutVehicleInput = {
    create?: XOR<JobcardCreateWithoutVehicleInput, JobcardUncheckedCreateWithoutVehicleInput> | JobcardCreateWithoutVehicleInput[] | JobcardUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: JobcardCreateOrConnectWithoutVehicleInput | JobcardCreateOrConnectWithoutVehicleInput[]
    createMany?: JobcardCreateManyVehicleInputEnvelope
    connect?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
  }

  export type JobcardUncheckedCreateNestedManyWithoutVehicleInput = {
    create?: XOR<JobcardCreateWithoutVehicleInput, JobcardUncheckedCreateWithoutVehicleInput> | JobcardCreateWithoutVehicleInput[] | JobcardUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: JobcardCreateOrConnectWithoutVehicleInput | JobcardCreateOrConnectWithoutVehicleInput[]
    createMany?: JobcardCreateManyVehicleInputEnvelope
    connect?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
  }

  export type CustomerUpdateOneRequiredWithoutUsing_vehiclesNestedInput = {
    create?: XOR<CustomerCreateWithoutUsing_vehiclesInput, CustomerUncheckedCreateWithoutUsing_vehiclesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUsing_vehiclesInput
    upsert?: CustomerUpsertWithoutUsing_vehiclesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutUsing_vehiclesInput, CustomerUpdateWithoutUsing_vehiclesInput>, CustomerUncheckedUpdateWithoutUsing_vehiclesInput>
  }

  export type CustomerUpdateOneRequiredWithoutOwned_vehiclesNestedInput = {
    create?: XOR<CustomerCreateWithoutOwned_vehiclesInput, CustomerUncheckedCreateWithoutOwned_vehiclesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutOwned_vehiclesInput
    upsert?: CustomerUpsertWithoutOwned_vehiclesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutOwned_vehiclesInput, CustomerUpdateWithoutOwned_vehiclesInput>, CustomerUncheckedUpdateWithoutOwned_vehiclesInput>
  }

  export type JobcardUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<JobcardCreateWithoutVehicleInput, JobcardUncheckedCreateWithoutVehicleInput> | JobcardCreateWithoutVehicleInput[] | JobcardUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: JobcardCreateOrConnectWithoutVehicleInput | JobcardCreateOrConnectWithoutVehicleInput[]
    upsert?: JobcardUpsertWithWhereUniqueWithoutVehicleInput | JobcardUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: JobcardCreateManyVehicleInputEnvelope
    set?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
    disconnect?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
    delete?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
    connect?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
    update?: JobcardUpdateWithWhereUniqueWithoutVehicleInput | JobcardUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: JobcardUpdateManyWithWhereWithoutVehicleInput | JobcardUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: JobcardScalarWhereInput | JobcardScalarWhereInput[]
  }

  export type JobcardUncheckedUpdateManyWithoutVehicleNestedInput = {
    create?: XOR<JobcardCreateWithoutVehicleInput, JobcardUncheckedCreateWithoutVehicleInput> | JobcardCreateWithoutVehicleInput[] | JobcardUncheckedCreateWithoutVehicleInput[]
    connectOrCreate?: JobcardCreateOrConnectWithoutVehicleInput | JobcardCreateOrConnectWithoutVehicleInput[]
    upsert?: JobcardUpsertWithWhereUniqueWithoutVehicleInput | JobcardUpsertWithWhereUniqueWithoutVehicleInput[]
    createMany?: JobcardCreateManyVehicleInputEnvelope
    set?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
    disconnect?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
    delete?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
    connect?: JobcardWhereUniqueInput | JobcardWhereUniqueInput[]
    update?: JobcardUpdateWithWhereUniqueWithoutVehicleInput | JobcardUpdateWithWhereUniqueWithoutVehicleInput[]
    updateMany?: JobcardUpdateManyWithWhereWithoutVehicleInput | JobcardUpdateManyWithWhereWithoutVehicleInput[]
    deleteMany?: JobcardScalarWhereInput | JobcardScalarWhereInput[]
  }

  export type VehiclesCreateNestedOneWithoutJobcardInput = {
    create?: XOR<VehiclesCreateWithoutJobcardInput, VehiclesUncheckedCreateWithoutJobcardInput>
    connectOrCreate?: VehiclesCreateOrConnectWithoutJobcardInput
    connect?: VehiclesWhereUniqueInput
  }

  export type JoblinesCreateNestedManyWithoutJobcard_numberInput = {
    create?: XOR<JoblinesCreateWithoutJobcard_numberInput, JoblinesUncheckedCreateWithoutJobcard_numberInput> | JoblinesCreateWithoutJobcard_numberInput[] | JoblinesUncheckedCreateWithoutJobcard_numberInput[]
    connectOrCreate?: JoblinesCreateOrConnectWithoutJobcard_numberInput | JoblinesCreateOrConnectWithoutJobcard_numberInput[]
    createMany?: JoblinesCreateManyJobcard_numberInputEnvelope
    connect?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
  }

  export type AllocatedJobsCreateNestedManyWithoutJobcardInput = {
    create?: XOR<AllocatedJobsCreateWithoutJobcardInput, AllocatedJobsUncheckedCreateWithoutJobcardInput> | AllocatedJobsCreateWithoutJobcardInput[] | AllocatedJobsUncheckedCreateWithoutJobcardInput[]
    connectOrCreate?: AllocatedJobsCreateOrConnectWithoutJobcardInput | AllocatedJobsCreateOrConnectWithoutJobcardInput[]
    createMany?: AllocatedJobsCreateManyJobcardInputEnvelope
    connect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
  }

  export type JoblinesUncheckedCreateNestedManyWithoutJobcard_numberInput = {
    create?: XOR<JoblinesCreateWithoutJobcard_numberInput, JoblinesUncheckedCreateWithoutJobcard_numberInput> | JoblinesCreateWithoutJobcard_numberInput[] | JoblinesUncheckedCreateWithoutJobcard_numberInput[]
    connectOrCreate?: JoblinesCreateOrConnectWithoutJobcard_numberInput | JoblinesCreateOrConnectWithoutJobcard_numberInput[]
    createMany?: JoblinesCreateManyJobcard_numberInputEnvelope
    connect?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
  }

  export type AllocatedJobsUncheckedCreateNestedManyWithoutJobcardInput = {
    create?: XOR<AllocatedJobsCreateWithoutJobcardInput, AllocatedJobsUncheckedCreateWithoutJobcardInput> | AllocatedJobsCreateWithoutJobcardInput[] | AllocatedJobsUncheckedCreateWithoutJobcardInput[]
    connectOrCreate?: AllocatedJobsCreateOrConnectWithoutJobcardInput | AllocatedJobsCreateOrConnectWithoutJobcardInput[]
    createMany?: AllocatedJobsCreateManyJobcardInputEnvelope
    connect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
  }

  export type VehiclesUpdateOneRequiredWithoutJobcardNestedInput = {
    create?: XOR<VehiclesCreateWithoutJobcardInput, VehiclesUncheckedCreateWithoutJobcardInput>
    connectOrCreate?: VehiclesCreateOrConnectWithoutJobcardInput
    upsert?: VehiclesUpsertWithoutJobcardInput
    connect?: VehiclesWhereUniqueInput
    update?: XOR<XOR<VehiclesUpdateToOneWithWhereWithoutJobcardInput, VehiclesUpdateWithoutJobcardInput>, VehiclesUncheckedUpdateWithoutJobcardInput>
  }

  export type JoblinesUpdateManyWithoutJobcard_numberNestedInput = {
    create?: XOR<JoblinesCreateWithoutJobcard_numberInput, JoblinesUncheckedCreateWithoutJobcard_numberInput> | JoblinesCreateWithoutJobcard_numberInput[] | JoblinesUncheckedCreateWithoutJobcard_numberInput[]
    connectOrCreate?: JoblinesCreateOrConnectWithoutJobcard_numberInput | JoblinesCreateOrConnectWithoutJobcard_numberInput[]
    upsert?: JoblinesUpsertWithWhereUniqueWithoutJobcard_numberInput | JoblinesUpsertWithWhereUniqueWithoutJobcard_numberInput[]
    createMany?: JoblinesCreateManyJobcard_numberInputEnvelope
    set?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
    disconnect?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
    delete?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
    connect?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
    update?: JoblinesUpdateWithWhereUniqueWithoutJobcard_numberInput | JoblinesUpdateWithWhereUniqueWithoutJobcard_numberInput[]
    updateMany?: JoblinesUpdateManyWithWhereWithoutJobcard_numberInput | JoblinesUpdateManyWithWhereWithoutJobcard_numberInput[]
    deleteMany?: JoblinesScalarWhereInput | JoblinesScalarWhereInput[]
  }

  export type AllocatedJobsUpdateManyWithoutJobcardNestedInput = {
    create?: XOR<AllocatedJobsCreateWithoutJobcardInput, AllocatedJobsUncheckedCreateWithoutJobcardInput> | AllocatedJobsCreateWithoutJobcardInput[] | AllocatedJobsUncheckedCreateWithoutJobcardInput[]
    connectOrCreate?: AllocatedJobsCreateOrConnectWithoutJobcardInput | AllocatedJobsCreateOrConnectWithoutJobcardInput[]
    upsert?: AllocatedJobsUpsertWithWhereUniqueWithoutJobcardInput | AllocatedJobsUpsertWithWhereUniqueWithoutJobcardInput[]
    createMany?: AllocatedJobsCreateManyJobcardInputEnvelope
    set?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    disconnect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    delete?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    connect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    update?: AllocatedJobsUpdateWithWhereUniqueWithoutJobcardInput | AllocatedJobsUpdateWithWhereUniqueWithoutJobcardInput[]
    updateMany?: AllocatedJobsUpdateManyWithWhereWithoutJobcardInput | AllocatedJobsUpdateManyWithWhereWithoutJobcardInput[]
    deleteMany?: AllocatedJobsScalarWhereInput | AllocatedJobsScalarWhereInput[]
  }

  export type JoblinesUncheckedUpdateManyWithoutJobcard_numberNestedInput = {
    create?: XOR<JoblinesCreateWithoutJobcard_numberInput, JoblinesUncheckedCreateWithoutJobcard_numberInput> | JoblinesCreateWithoutJobcard_numberInput[] | JoblinesUncheckedCreateWithoutJobcard_numberInput[]
    connectOrCreate?: JoblinesCreateOrConnectWithoutJobcard_numberInput | JoblinesCreateOrConnectWithoutJobcard_numberInput[]
    upsert?: JoblinesUpsertWithWhereUniqueWithoutJobcard_numberInput | JoblinesUpsertWithWhereUniqueWithoutJobcard_numberInput[]
    createMany?: JoblinesCreateManyJobcard_numberInputEnvelope
    set?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
    disconnect?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
    delete?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
    connect?: JoblinesWhereUniqueInput | JoblinesWhereUniqueInput[]
    update?: JoblinesUpdateWithWhereUniqueWithoutJobcard_numberInput | JoblinesUpdateWithWhereUniqueWithoutJobcard_numberInput[]
    updateMany?: JoblinesUpdateManyWithWhereWithoutJobcard_numberInput | JoblinesUpdateManyWithWhereWithoutJobcard_numberInput[]
    deleteMany?: JoblinesScalarWhereInput | JoblinesScalarWhereInput[]
  }

  export type AllocatedJobsUncheckedUpdateManyWithoutJobcardNestedInput = {
    create?: XOR<AllocatedJobsCreateWithoutJobcardInput, AllocatedJobsUncheckedCreateWithoutJobcardInput> | AllocatedJobsCreateWithoutJobcardInput[] | AllocatedJobsUncheckedCreateWithoutJobcardInput[]
    connectOrCreate?: AllocatedJobsCreateOrConnectWithoutJobcardInput | AllocatedJobsCreateOrConnectWithoutJobcardInput[]
    upsert?: AllocatedJobsUpsertWithWhereUniqueWithoutJobcardInput | AllocatedJobsUpsertWithWhereUniqueWithoutJobcardInput[]
    createMany?: AllocatedJobsCreateManyJobcardInputEnvelope
    set?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    disconnect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    delete?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    connect?: AllocatedJobsWhereUniqueInput | AllocatedJobsWhereUniqueInput[]
    update?: AllocatedJobsUpdateWithWhereUniqueWithoutJobcardInput | AllocatedJobsUpdateWithWhereUniqueWithoutJobcardInput[]
    updateMany?: AllocatedJobsUpdateManyWithWhereWithoutJobcardInput | AllocatedJobsUpdateManyWithWhereWithoutJobcardInput[]
    deleteMany?: AllocatedJobsScalarWhereInput | AllocatedJobsScalarWhereInput[]
  }

  export type JobcardCreateNestedOneWithoutJoblinesInput = {
    create?: XOR<JobcardCreateWithoutJoblinesInput, JobcardUncheckedCreateWithoutJoblinesInput>
    connectOrCreate?: JobcardCreateOrConnectWithoutJoblinesInput
    connect?: JobcardWhereUniqueInput
  }

  export type CommentsCreateNestedManyWithoutJoblinesInput = {
    create?: XOR<CommentsCreateWithoutJoblinesInput, CommentsUncheckedCreateWithoutJoblinesInput> | CommentsCreateWithoutJoblinesInput[] | CommentsUncheckedCreateWithoutJoblinesInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutJoblinesInput | CommentsCreateOrConnectWithoutJoblinesInput[]
    createMany?: CommentsCreateManyJoblinesInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutJoblinesInput = {
    create?: XOR<CommentsCreateWithoutJoblinesInput, CommentsUncheckedCreateWithoutJoblinesInput> | CommentsCreateWithoutJoblinesInput[] | CommentsUncheckedCreateWithoutJoblinesInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutJoblinesInput | CommentsCreateOrConnectWithoutJoblinesInput[]
    createMany?: CommentsCreateManyJoblinesInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobcardUpdateOneRequiredWithoutJoblinesNestedInput = {
    create?: XOR<JobcardCreateWithoutJoblinesInput, JobcardUncheckedCreateWithoutJoblinesInput>
    connectOrCreate?: JobcardCreateOrConnectWithoutJoblinesInput
    upsert?: JobcardUpsertWithoutJoblinesInput
    connect?: JobcardWhereUniqueInput
    update?: XOR<XOR<JobcardUpdateToOneWithWhereWithoutJoblinesInput, JobcardUpdateWithoutJoblinesInput>, JobcardUncheckedUpdateWithoutJoblinesInput>
  }

  export type CommentsUpdateManyWithoutJoblinesNestedInput = {
    create?: XOR<CommentsCreateWithoutJoblinesInput, CommentsUncheckedCreateWithoutJoblinesInput> | CommentsCreateWithoutJoblinesInput[] | CommentsUncheckedCreateWithoutJoblinesInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutJoblinesInput | CommentsCreateOrConnectWithoutJoblinesInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutJoblinesInput | CommentsUpsertWithWhereUniqueWithoutJoblinesInput[]
    createMany?: CommentsCreateManyJoblinesInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutJoblinesInput | CommentsUpdateWithWhereUniqueWithoutJoblinesInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutJoblinesInput | CommentsUpdateManyWithWhereWithoutJoblinesInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutJoblinesNestedInput = {
    create?: XOR<CommentsCreateWithoutJoblinesInput, CommentsUncheckedCreateWithoutJoblinesInput> | CommentsCreateWithoutJoblinesInput[] | CommentsUncheckedCreateWithoutJoblinesInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutJoblinesInput | CommentsCreateOrConnectWithoutJoblinesInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutJoblinesInput | CommentsUpsertWithWhereUniqueWithoutJoblinesInput[]
    createMany?: CommentsCreateManyJoblinesInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutJoblinesInput | CommentsUpdateWithWhereUniqueWithoutJoblinesInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutJoblinesInput | CommentsUpdateManyWithWhereWithoutJoblinesInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type JobcardCreateNestedOneWithoutAllocated_jobsInput = {
    create?: XOR<JobcardCreateWithoutAllocated_jobsInput, JobcardUncheckedCreateWithoutAllocated_jobsInput>
    connectOrCreate?: JobcardCreateOrConnectWithoutAllocated_jobsInput
    connect?: JobcardWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutAllocated_jobsInput = {
    create?: XOR<EmployeeCreateWithoutAllocated_jobsInput, EmployeeUncheckedCreateWithoutAllocated_jobsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAllocated_jobsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type JobcardUpdateOneRequiredWithoutAllocated_jobsNestedInput = {
    create?: XOR<JobcardCreateWithoutAllocated_jobsInput, JobcardUncheckedCreateWithoutAllocated_jobsInput>
    connectOrCreate?: JobcardCreateOrConnectWithoutAllocated_jobsInput
    upsert?: JobcardUpsertWithoutAllocated_jobsInput
    connect?: JobcardWhereUniqueInput
    update?: XOR<XOR<JobcardUpdateToOneWithWhereWithoutAllocated_jobsInput, JobcardUpdateWithoutAllocated_jobsInput>, JobcardUncheckedUpdateWithoutAllocated_jobsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutAllocated_jobsNestedInput = {
    create?: XOR<EmployeeCreateWithoutAllocated_jobsInput, EmployeeUncheckedCreateWithoutAllocated_jobsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAllocated_jobsInput
    upsert?: EmployeeUpsertWithoutAllocated_jobsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutAllocated_jobsInput, EmployeeUpdateWithoutAllocated_jobsInput>, EmployeeUncheckedUpdateWithoutAllocated_jobsInput>
  }

  export type JoblinesCreateNestedOneWithoutCommentsInput = {
    create?: XOR<JoblinesCreateWithoutCommentsInput, JoblinesUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: JoblinesCreateOrConnectWithoutCommentsInput
    connect?: JoblinesWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCommentsInput = {
    create?: XOR<EmployeeCreateWithoutCommentsInput, EmployeeUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCommentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EnumCommentTypeFieldUpdateOperationsInput = {
    set?: $Enums.CommentType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type JoblinesUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<JoblinesCreateWithoutCommentsInput, JoblinesUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: JoblinesCreateOrConnectWithoutCommentsInput
    upsert?: JoblinesUpsertWithoutCommentsInput
    connect?: JoblinesWhereUniqueInput
    update?: XOR<XOR<JoblinesUpdateToOneWithWhereWithoutCommentsInput, JoblinesUpdateWithoutCommentsInput>, JoblinesUncheckedUpdateWithoutCommentsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCommentsInput, EmployeeUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCommentsInput
    upsert?: EmployeeUpsertWithoutCommentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCommentsInput, EmployeeUpdateWithoutCommentsInput>, EmployeeUncheckedUpdateWithoutCommentsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumCommentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentType | EnumCommentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommentType[] | ListEnumCommentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommentType[] | ListEnumCommentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommentTypeFilter<$PrismaModel> | $Enums.CommentType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumCommentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentType | EnumCommentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommentType[] | ListEnumCommentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommentType[] | ListEnumCommentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommentTypeWithAggregatesFilter<$PrismaModel> | $Enums.CommentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommentTypeFilter<$PrismaModel>
    _max?: NestedEnumCommentTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AllocatedJobsCreateWithoutEmployeeInput = {
    jobcard: JobcardCreateNestedOneWithoutAllocated_jobsInput
  }

  export type AllocatedJobsUncheckedCreateWithoutEmployeeInput = {
    id?: number
    jobcard_id: number
  }

  export type AllocatedJobsCreateOrConnectWithoutEmployeeInput = {
    where: AllocatedJobsWhereUniqueInput
    create: XOR<AllocatedJobsCreateWithoutEmployeeInput, AllocatedJobsUncheckedCreateWithoutEmployeeInput>
  }

  export type AllocatedJobsCreateManyEmployeeInputEnvelope = {
    data: AllocatedJobsCreateManyEmployeeInput | AllocatedJobsCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type CommentsCreateWithoutEmployeeInput = {
    type: $Enums.CommentType
    comment: string
    created_at: Date | string
    joblines: JoblinesCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutEmployeeInput = {
    id?: number
    type: $Enums.CommentType
    comment: string
    jobline_id: number
    created_at: Date | string
  }

  export type CommentsCreateOrConnectWithoutEmployeeInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutEmployeeInput, CommentsUncheckedCreateWithoutEmployeeInput>
  }

  export type CommentsCreateManyEmployeeInputEnvelope = {
    data: CommentsCreateManyEmployeeInput | CommentsCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type AllocatedJobsUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: AllocatedJobsWhereUniqueInput
    update: XOR<AllocatedJobsUpdateWithoutEmployeeInput, AllocatedJobsUncheckedUpdateWithoutEmployeeInput>
    create: XOR<AllocatedJobsCreateWithoutEmployeeInput, AllocatedJobsUncheckedCreateWithoutEmployeeInput>
  }

  export type AllocatedJobsUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: AllocatedJobsWhereUniqueInput
    data: XOR<AllocatedJobsUpdateWithoutEmployeeInput, AllocatedJobsUncheckedUpdateWithoutEmployeeInput>
  }

  export type AllocatedJobsUpdateManyWithWhereWithoutEmployeeInput = {
    where: AllocatedJobsScalarWhereInput
    data: XOR<AllocatedJobsUpdateManyMutationInput, AllocatedJobsUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type AllocatedJobsScalarWhereInput = {
    AND?: AllocatedJobsScalarWhereInput | AllocatedJobsScalarWhereInput[]
    OR?: AllocatedJobsScalarWhereInput[]
    NOT?: AllocatedJobsScalarWhereInput | AllocatedJobsScalarWhereInput[]
    id?: IntFilter<"AllocatedJobs"> | number
    jobcard_id?: IntFilter<"AllocatedJobs"> | number
    employee_id?: IntFilter<"AllocatedJobs"> | number
  }

  export type CommentsUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutEmployeeInput, CommentsUncheckedUpdateWithoutEmployeeInput>
    create: XOR<CommentsCreateWithoutEmployeeInput, CommentsUncheckedCreateWithoutEmployeeInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutEmployeeInput, CommentsUncheckedUpdateWithoutEmployeeInput>
  }

  export type CommentsUpdateManyWithWhereWithoutEmployeeInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type CommentsScalarWhereInput = {
    AND?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
    OR?: CommentsScalarWhereInput[]
    NOT?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
    id?: IntFilter<"Comments"> | number
    type?: EnumCommentTypeFilter<"Comments"> | $Enums.CommentType
    comment?: StringFilter<"Comments"> | string
    jobline_id?: IntFilter<"Comments"> | number
    created_at?: DateTimeFilter<"Comments"> | Date | string
    employee_id?: IntFilter<"Comments"> | number
  }

  export type VehiclesCreateWithoutUsing_customerInput = {
    vrm: string
    vin: string
    make: string
    model: string
    owning_customer: CustomerCreateNestedOneWithoutOwned_vehiclesInput
    Jobcard?: JobcardCreateNestedManyWithoutVehicleInput
  }

  export type VehiclesUncheckedCreateWithoutUsing_customerInput = {
    id?: number
    vrm: string
    vin: string
    make: string
    model: string
    owning_customer_id: number
    Jobcard?: JobcardUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehiclesCreateOrConnectWithoutUsing_customerInput = {
    where: VehiclesWhereUniqueInput
    create: XOR<VehiclesCreateWithoutUsing_customerInput, VehiclesUncheckedCreateWithoutUsing_customerInput>
  }

  export type VehiclesCreateManyUsing_customerInputEnvelope = {
    data: VehiclesCreateManyUsing_customerInput | VehiclesCreateManyUsing_customerInput[]
    skipDuplicates?: boolean
  }

  export type VehiclesCreateWithoutOwning_customerInput = {
    vrm: string
    vin: string
    make: string
    model: string
    using_customer: CustomerCreateNestedOneWithoutUsing_vehiclesInput
    Jobcard?: JobcardCreateNestedManyWithoutVehicleInput
  }

  export type VehiclesUncheckedCreateWithoutOwning_customerInput = {
    id?: number
    vrm: string
    vin: string
    make: string
    model: string
    using_customer_id: number
    Jobcard?: JobcardUncheckedCreateNestedManyWithoutVehicleInput
  }

  export type VehiclesCreateOrConnectWithoutOwning_customerInput = {
    where: VehiclesWhereUniqueInput
    create: XOR<VehiclesCreateWithoutOwning_customerInput, VehiclesUncheckedCreateWithoutOwning_customerInput>
  }

  export type VehiclesCreateManyOwning_customerInputEnvelope = {
    data: VehiclesCreateManyOwning_customerInput | VehiclesCreateManyOwning_customerInput[]
    skipDuplicates?: boolean
  }

  export type VehiclesUpsertWithWhereUniqueWithoutUsing_customerInput = {
    where: VehiclesWhereUniqueInput
    update: XOR<VehiclesUpdateWithoutUsing_customerInput, VehiclesUncheckedUpdateWithoutUsing_customerInput>
    create: XOR<VehiclesCreateWithoutUsing_customerInput, VehiclesUncheckedCreateWithoutUsing_customerInput>
  }

  export type VehiclesUpdateWithWhereUniqueWithoutUsing_customerInput = {
    where: VehiclesWhereUniqueInput
    data: XOR<VehiclesUpdateWithoutUsing_customerInput, VehiclesUncheckedUpdateWithoutUsing_customerInput>
  }

  export type VehiclesUpdateManyWithWhereWithoutUsing_customerInput = {
    where: VehiclesScalarWhereInput
    data: XOR<VehiclesUpdateManyMutationInput, VehiclesUncheckedUpdateManyWithoutUsing_customerInput>
  }

  export type VehiclesScalarWhereInput = {
    AND?: VehiclesScalarWhereInput | VehiclesScalarWhereInput[]
    OR?: VehiclesScalarWhereInput[]
    NOT?: VehiclesScalarWhereInput | VehiclesScalarWhereInput[]
    id?: IntFilter<"Vehicles"> | number
    vrm?: StringFilter<"Vehicles"> | string
    vin?: StringFilter<"Vehicles"> | string
    make?: StringFilter<"Vehicles"> | string
    model?: StringFilter<"Vehicles"> | string
    using_customer_id?: IntFilter<"Vehicles"> | number
    owning_customer_id?: IntFilter<"Vehicles"> | number
  }

  export type VehiclesUpsertWithWhereUniqueWithoutOwning_customerInput = {
    where: VehiclesWhereUniqueInput
    update: XOR<VehiclesUpdateWithoutOwning_customerInput, VehiclesUncheckedUpdateWithoutOwning_customerInput>
    create: XOR<VehiclesCreateWithoutOwning_customerInput, VehiclesUncheckedCreateWithoutOwning_customerInput>
  }

  export type VehiclesUpdateWithWhereUniqueWithoutOwning_customerInput = {
    where: VehiclesWhereUniqueInput
    data: XOR<VehiclesUpdateWithoutOwning_customerInput, VehiclesUncheckedUpdateWithoutOwning_customerInput>
  }

  export type VehiclesUpdateManyWithWhereWithoutOwning_customerInput = {
    where: VehiclesScalarWhereInput
    data: XOR<VehiclesUpdateManyMutationInput, VehiclesUncheckedUpdateManyWithoutOwning_customerInput>
  }

  export type CustomerCreateWithoutUsing_vehiclesInput = {
    name: string
    contact_name: string
    contact_number: string
    contact_email: string
    owned_vehicles?: VehiclesCreateNestedManyWithoutOwning_customerInput
  }

  export type CustomerUncheckedCreateWithoutUsing_vehiclesInput = {
    id?: number
    name: string
    contact_name: string
    contact_number: string
    contact_email: string
    owned_vehicles?: VehiclesUncheckedCreateNestedManyWithoutOwning_customerInput
  }

  export type CustomerCreateOrConnectWithoutUsing_vehiclesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutUsing_vehiclesInput, CustomerUncheckedCreateWithoutUsing_vehiclesInput>
  }

  export type CustomerCreateWithoutOwned_vehiclesInput = {
    name: string
    contact_name: string
    contact_number: string
    contact_email: string
    using_vehicles?: VehiclesCreateNestedManyWithoutUsing_customerInput
  }

  export type CustomerUncheckedCreateWithoutOwned_vehiclesInput = {
    id?: number
    name: string
    contact_name: string
    contact_number: string
    contact_email: string
    using_vehicles?: VehiclesUncheckedCreateNestedManyWithoutUsing_customerInput
  }

  export type CustomerCreateOrConnectWithoutOwned_vehiclesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutOwned_vehiclesInput, CustomerUncheckedCreateWithoutOwned_vehiclesInput>
  }

  export type JobcardCreateWithoutVehicleInput = {
    jobcard_number: number
    joblines?: JoblinesCreateNestedManyWithoutJobcard_numberInput
    allocated_jobs?: AllocatedJobsCreateNestedManyWithoutJobcardInput
  }

  export type JobcardUncheckedCreateWithoutVehicleInput = {
    id?: number
    jobcard_number: number
    joblines?: JoblinesUncheckedCreateNestedManyWithoutJobcard_numberInput
    allocated_jobs?: AllocatedJobsUncheckedCreateNestedManyWithoutJobcardInput
  }

  export type JobcardCreateOrConnectWithoutVehicleInput = {
    where: JobcardWhereUniqueInput
    create: XOR<JobcardCreateWithoutVehicleInput, JobcardUncheckedCreateWithoutVehicleInput>
  }

  export type JobcardCreateManyVehicleInputEnvelope = {
    data: JobcardCreateManyVehicleInput | JobcardCreateManyVehicleInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutUsing_vehiclesInput = {
    update: XOR<CustomerUpdateWithoutUsing_vehiclesInput, CustomerUncheckedUpdateWithoutUsing_vehiclesInput>
    create: XOR<CustomerCreateWithoutUsing_vehiclesInput, CustomerUncheckedCreateWithoutUsing_vehiclesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutUsing_vehiclesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutUsing_vehiclesInput, CustomerUncheckedUpdateWithoutUsing_vehiclesInput>
  }

  export type CustomerUpdateWithoutUsing_vehiclesInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    contact_email?: StringFieldUpdateOperationsInput | string
    owned_vehicles?: VehiclesUpdateManyWithoutOwning_customerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutUsing_vehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    contact_email?: StringFieldUpdateOperationsInput | string
    owned_vehicles?: VehiclesUncheckedUpdateManyWithoutOwning_customerNestedInput
  }

  export type CustomerUpsertWithoutOwned_vehiclesInput = {
    update: XOR<CustomerUpdateWithoutOwned_vehiclesInput, CustomerUncheckedUpdateWithoutOwned_vehiclesInput>
    create: XOR<CustomerCreateWithoutOwned_vehiclesInput, CustomerUncheckedCreateWithoutOwned_vehiclesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutOwned_vehiclesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutOwned_vehiclesInput, CustomerUncheckedUpdateWithoutOwned_vehiclesInput>
  }

  export type CustomerUpdateWithoutOwned_vehiclesInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    contact_email?: StringFieldUpdateOperationsInput | string
    using_vehicles?: VehiclesUpdateManyWithoutUsing_customerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutOwned_vehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    contact_email?: StringFieldUpdateOperationsInput | string
    using_vehicles?: VehiclesUncheckedUpdateManyWithoutUsing_customerNestedInput
  }

  export type JobcardUpsertWithWhereUniqueWithoutVehicleInput = {
    where: JobcardWhereUniqueInput
    update: XOR<JobcardUpdateWithoutVehicleInput, JobcardUncheckedUpdateWithoutVehicleInput>
    create: XOR<JobcardCreateWithoutVehicleInput, JobcardUncheckedCreateWithoutVehicleInput>
  }

  export type JobcardUpdateWithWhereUniqueWithoutVehicleInput = {
    where: JobcardWhereUniqueInput
    data: XOR<JobcardUpdateWithoutVehicleInput, JobcardUncheckedUpdateWithoutVehicleInput>
  }

  export type JobcardUpdateManyWithWhereWithoutVehicleInput = {
    where: JobcardScalarWhereInput
    data: XOR<JobcardUpdateManyMutationInput, JobcardUncheckedUpdateManyWithoutVehicleInput>
  }

  export type JobcardScalarWhereInput = {
    AND?: JobcardScalarWhereInput | JobcardScalarWhereInput[]
    OR?: JobcardScalarWhereInput[]
    NOT?: JobcardScalarWhereInput | JobcardScalarWhereInput[]
    id?: IntFilter<"Jobcard"> | number
    jobcard_number?: IntFilter<"Jobcard"> | number
    vehicle_id?: IntFilter<"Jobcard"> | number
  }

  export type VehiclesCreateWithoutJobcardInput = {
    vrm: string
    vin: string
    make: string
    model: string
    using_customer: CustomerCreateNestedOneWithoutUsing_vehiclesInput
    owning_customer: CustomerCreateNestedOneWithoutOwned_vehiclesInput
  }

  export type VehiclesUncheckedCreateWithoutJobcardInput = {
    id?: number
    vrm: string
    vin: string
    make: string
    model: string
    using_customer_id: number
    owning_customer_id: number
  }

  export type VehiclesCreateOrConnectWithoutJobcardInput = {
    where: VehiclesWhereUniqueInput
    create: XOR<VehiclesCreateWithoutJobcardInput, VehiclesUncheckedCreateWithoutJobcardInput>
  }

  export type JoblinesCreateWithoutJobcard_numberInput = {
    description: string
    time_allocated: number
    comments?: CommentsCreateNestedManyWithoutJoblinesInput
  }

  export type JoblinesUncheckedCreateWithoutJobcard_numberInput = {
    id?: number
    description: string
    time_allocated: number
    comments?: CommentsUncheckedCreateNestedManyWithoutJoblinesInput
  }

  export type JoblinesCreateOrConnectWithoutJobcard_numberInput = {
    where: JoblinesWhereUniqueInput
    create: XOR<JoblinesCreateWithoutJobcard_numberInput, JoblinesUncheckedCreateWithoutJobcard_numberInput>
  }

  export type JoblinesCreateManyJobcard_numberInputEnvelope = {
    data: JoblinesCreateManyJobcard_numberInput | JoblinesCreateManyJobcard_numberInput[]
    skipDuplicates?: boolean
  }

  export type AllocatedJobsCreateWithoutJobcardInput = {
    employee: EmployeeCreateNestedOneWithoutAllocated_jobsInput
  }

  export type AllocatedJobsUncheckedCreateWithoutJobcardInput = {
    id?: number
    employee_id: number
  }

  export type AllocatedJobsCreateOrConnectWithoutJobcardInput = {
    where: AllocatedJobsWhereUniqueInput
    create: XOR<AllocatedJobsCreateWithoutJobcardInput, AllocatedJobsUncheckedCreateWithoutJobcardInput>
  }

  export type AllocatedJobsCreateManyJobcardInputEnvelope = {
    data: AllocatedJobsCreateManyJobcardInput | AllocatedJobsCreateManyJobcardInput[]
    skipDuplicates?: boolean
  }

  export type VehiclesUpsertWithoutJobcardInput = {
    update: XOR<VehiclesUpdateWithoutJobcardInput, VehiclesUncheckedUpdateWithoutJobcardInput>
    create: XOR<VehiclesCreateWithoutJobcardInput, VehiclesUncheckedCreateWithoutJobcardInput>
    where?: VehiclesWhereInput
  }

  export type VehiclesUpdateToOneWithWhereWithoutJobcardInput = {
    where?: VehiclesWhereInput
    data: XOR<VehiclesUpdateWithoutJobcardInput, VehiclesUncheckedUpdateWithoutJobcardInput>
  }

  export type VehiclesUpdateWithoutJobcardInput = {
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    using_customer?: CustomerUpdateOneRequiredWithoutUsing_vehiclesNestedInput
    owning_customer?: CustomerUpdateOneRequiredWithoutOwned_vehiclesNestedInput
  }

  export type VehiclesUncheckedUpdateWithoutJobcardInput = {
    id?: IntFieldUpdateOperationsInput | number
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    using_customer_id?: IntFieldUpdateOperationsInput | number
    owning_customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type JoblinesUpsertWithWhereUniqueWithoutJobcard_numberInput = {
    where: JoblinesWhereUniqueInput
    update: XOR<JoblinesUpdateWithoutJobcard_numberInput, JoblinesUncheckedUpdateWithoutJobcard_numberInput>
    create: XOR<JoblinesCreateWithoutJobcard_numberInput, JoblinesUncheckedCreateWithoutJobcard_numberInput>
  }

  export type JoblinesUpdateWithWhereUniqueWithoutJobcard_numberInput = {
    where: JoblinesWhereUniqueInput
    data: XOR<JoblinesUpdateWithoutJobcard_numberInput, JoblinesUncheckedUpdateWithoutJobcard_numberInput>
  }

  export type JoblinesUpdateManyWithWhereWithoutJobcard_numberInput = {
    where: JoblinesScalarWhereInput
    data: XOR<JoblinesUpdateManyMutationInput, JoblinesUncheckedUpdateManyWithoutJobcard_numberInput>
  }

  export type JoblinesScalarWhereInput = {
    AND?: JoblinesScalarWhereInput | JoblinesScalarWhereInput[]
    OR?: JoblinesScalarWhereInput[]
    NOT?: JoblinesScalarWhereInput | JoblinesScalarWhereInput[]
    id?: IntFilter<"Joblines"> | number
    jobcard_id?: IntFilter<"Joblines"> | number
    description?: StringFilter<"Joblines"> | string
    time_allocated?: FloatFilter<"Joblines"> | number
  }

  export type AllocatedJobsUpsertWithWhereUniqueWithoutJobcardInput = {
    where: AllocatedJobsWhereUniqueInput
    update: XOR<AllocatedJobsUpdateWithoutJobcardInput, AllocatedJobsUncheckedUpdateWithoutJobcardInput>
    create: XOR<AllocatedJobsCreateWithoutJobcardInput, AllocatedJobsUncheckedCreateWithoutJobcardInput>
  }

  export type AllocatedJobsUpdateWithWhereUniqueWithoutJobcardInput = {
    where: AllocatedJobsWhereUniqueInput
    data: XOR<AllocatedJobsUpdateWithoutJobcardInput, AllocatedJobsUncheckedUpdateWithoutJobcardInput>
  }

  export type AllocatedJobsUpdateManyWithWhereWithoutJobcardInput = {
    where: AllocatedJobsScalarWhereInput
    data: XOR<AllocatedJobsUpdateManyMutationInput, AllocatedJobsUncheckedUpdateManyWithoutJobcardInput>
  }

  export type JobcardCreateWithoutJoblinesInput = {
    jobcard_number: number
    vehicle: VehiclesCreateNestedOneWithoutJobcardInput
    allocated_jobs?: AllocatedJobsCreateNestedManyWithoutJobcardInput
  }

  export type JobcardUncheckedCreateWithoutJoblinesInput = {
    id?: number
    jobcard_number: number
    vehicle_id: number
    allocated_jobs?: AllocatedJobsUncheckedCreateNestedManyWithoutJobcardInput
  }

  export type JobcardCreateOrConnectWithoutJoblinesInput = {
    where: JobcardWhereUniqueInput
    create: XOR<JobcardCreateWithoutJoblinesInput, JobcardUncheckedCreateWithoutJoblinesInput>
  }

  export type CommentsCreateWithoutJoblinesInput = {
    type: $Enums.CommentType
    comment: string
    created_at: Date | string
    employee: EmployeeCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateWithoutJoblinesInput = {
    id?: number
    type: $Enums.CommentType
    comment: string
    created_at: Date | string
    employee_id: number
  }

  export type CommentsCreateOrConnectWithoutJoblinesInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutJoblinesInput, CommentsUncheckedCreateWithoutJoblinesInput>
  }

  export type CommentsCreateManyJoblinesInputEnvelope = {
    data: CommentsCreateManyJoblinesInput | CommentsCreateManyJoblinesInput[]
    skipDuplicates?: boolean
  }

  export type JobcardUpsertWithoutJoblinesInput = {
    update: XOR<JobcardUpdateWithoutJoblinesInput, JobcardUncheckedUpdateWithoutJoblinesInput>
    create: XOR<JobcardCreateWithoutJoblinesInput, JobcardUncheckedCreateWithoutJoblinesInput>
    where?: JobcardWhereInput
  }

  export type JobcardUpdateToOneWithWhereWithoutJoblinesInput = {
    where?: JobcardWhereInput
    data: XOR<JobcardUpdateWithoutJoblinesInput, JobcardUncheckedUpdateWithoutJoblinesInput>
  }

  export type JobcardUpdateWithoutJoblinesInput = {
    jobcard_number?: IntFieldUpdateOperationsInput | number
    vehicle?: VehiclesUpdateOneRequiredWithoutJobcardNestedInput
    allocated_jobs?: AllocatedJobsUpdateManyWithoutJobcardNestedInput
  }

  export type JobcardUncheckedUpdateWithoutJoblinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_number?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
    allocated_jobs?: AllocatedJobsUncheckedUpdateManyWithoutJobcardNestedInput
  }

  export type CommentsUpsertWithWhereUniqueWithoutJoblinesInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutJoblinesInput, CommentsUncheckedUpdateWithoutJoblinesInput>
    create: XOR<CommentsCreateWithoutJoblinesInput, CommentsUncheckedCreateWithoutJoblinesInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutJoblinesInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutJoblinesInput, CommentsUncheckedUpdateWithoutJoblinesInput>
  }

  export type CommentsUpdateManyWithWhereWithoutJoblinesInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutJoblinesInput>
  }

  export type JobcardCreateWithoutAllocated_jobsInput = {
    jobcard_number: number
    vehicle: VehiclesCreateNestedOneWithoutJobcardInput
    joblines?: JoblinesCreateNestedManyWithoutJobcard_numberInput
  }

  export type JobcardUncheckedCreateWithoutAllocated_jobsInput = {
    id?: number
    jobcard_number: number
    vehicle_id: number
    joblines?: JoblinesUncheckedCreateNestedManyWithoutJobcard_numberInput
  }

  export type JobcardCreateOrConnectWithoutAllocated_jobsInput = {
    where: JobcardWhereUniqueInput
    create: XOR<JobcardCreateWithoutAllocated_jobsInput, JobcardUncheckedCreateWithoutAllocated_jobsInput>
  }

  export type EmployeeCreateWithoutAllocated_jobsInput = {
    name: string
    role: $Enums.Role
    active: boolean
    comments?: CommentsCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutAllocated_jobsInput = {
    id?: number
    name: string
    role: $Enums.Role
    active: boolean
    comments?: CommentsUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutAllocated_jobsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutAllocated_jobsInput, EmployeeUncheckedCreateWithoutAllocated_jobsInput>
  }

  export type JobcardUpsertWithoutAllocated_jobsInput = {
    update: XOR<JobcardUpdateWithoutAllocated_jobsInput, JobcardUncheckedUpdateWithoutAllocated_jobsInput>
    create: XOR<JobcardCreateWithoutAllocated_jobsInput, JobcardUncheckedCreateWithoutAllocated_jobsInput>
    where?: JobcardWhereInput
  }

  export type JobcardUpdateToOneWithWhereWithoutAllocated_jobsInput = {
    where?: JobcardWhereInput
    data: XOR<JobcardUpdateWithoutAllocated_jobsInput, JobcardUncheckedUpdateWithoutAllocated_jobsInput>
  }

  export type JobcardUpdateWithoutAllocated_jobsInput = {
    jobcard_number?: IntFieldUpdateOperationsInput | number
    vehicle?: VehiclesUpdateOneRequiredWithoutJobcardNestedInput
    joblines?: JoblinesUpdateManyWithoutJobcard_numberNestedInput
  }

  export type JobcardUncheckedUpdateWithoutAllocated_jobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_number?: IntFieldUpdateOperationsInput | number
    vehicle_id?: IntFieldUpdateOperationsInput | number
    joblines?: JoblinesUncheckedUpdateManyWithoutJobcard_numberNestedInput
  }

  export type EmployeeUpsertWithoutAllocated_jobsInput = {
    update: XOR<EmployeeUpdateWithoutAllocated_jobsInput, EmployeeUncheckedUpdateWithoutAllocated_jobsInput>
    create: XOR<EmployeeCreateWithoutAllocated_jobsInput, EmployeeUncheckedCreateWithoutAllocated_jobsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutAllocated_jobsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutAllocated_jobsInput, EmployeeUncheckedUpdateWithoutAllocated_jobsInput>
  }

  export type EmployeeUpdateWithoutAllocated_jobsInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    active?: BoolFieldUpdateOperationsInput | boolean
    comments?: CommentsUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutAllocated_jobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    active?: BoolFieldUpdateOperationsInput | boolean
    comments?: CommentsUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type JoblinesCreateWithoutCommentsInput = {
    description: string
    time_allocated: number
    jobcard_number: JobcardCreateNestedOneWithoutJoblinesInput
  }

  export type JoblinesUncheckedCreateWithoutCommentsInput = {
    id?: number
    jobcard_id: number
    description: string
    time_allocated: number
  }

  export type JoblinesCreateOrConnectWithoutCommentsInput = {
    where: JoblinesWhereUniqueInput
    create: XOR<JoblinesCreateWithoutCommentsInput, JoblinesUncheckedCreateWithoutCommentsInput>
  }

  export type EmployeeCreateWithoutCommentsInput = {
    name: string
    role: $Enums.Role
    active: boolean
    allocated_jobs?: AllocatedJobsCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutCommentsInput = {
    id?: number
    name: string
    role: $Enums.Role
    active: boolean
    allocated_jobs?: AllocatedJobsUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutCommentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCommentsInput, EmployeeUncheckedCreateWithoutCommentsInput>
  }

  export type JoblinesUpsertWithoutCommentsInput = {
    update: XOR<JoblinesUpdateWithoutCommentsInput, JoblinesUncheckedUpdateWithoutCommentsInput>
    create: XOR<JoblinesCreateWithoutCommentsInput, JoblinesUncheckedCreateWithoutCommentsInput>
    where?: JoblinesWhereInput
  }

  export type JoblinesUpdateToOneWithWhereWithoutCommentsInput = {
    where?: JoblinesWhereInput
    data: XOR<JoblinesUpdateWithoutCommentsInput, JoblinesUncheckedUpdateWithoutCommentsInput>
  }

  export type JoblinesUpdateWithoutCommentsInput = {
    description?: StringFieldUpdateOperationsInput | string
    time_allocated?: FloatFieldUpdateOperationsInput | number
    jobcard_number?: JobcardUpdateOneRequiredWithoutJoblinesNestedInput
  }

  export type JoblinesUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    time_allocated?: FloatFieldUpdateOperationsInput | number
  }

  export type EmployeeUpsertWithoutCommentsInput = {
    update: XOR<EmployeeUpdateWithoutCommentsInput, EmployeeUncheckedUpdateWithoutCommentsInput>
    create: XOR<EmployeeCreateWithoutCommentsInput, EmployeeUncheckedCreateWithoutCommentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCommentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCommentsInput, EmployeeUncheckedUpdateWithoutCommentsInput>
  }

  export type EmployeeUpdateWithoutCommentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    active?: BoolFieldUpdateOperationsInput | boolean
    allocated_jobs?: AllocatedJobsUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    active?: BoolFieldUpdateOperationsInput | boolean
    allocated_jobs?: AllocatedJobsUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type AllocatedJobsCreateManyEmployeeInput = {
    id?: number
    jobcard_id: number
  }

  export type CommentsCreateManyEmployeeInput = {
    id?: number
    type: $Enums.CommentType
    comment: string
    jobline_id: number
    created_at: Date | string
  }

  export type AllocatedJobsUpdateWithoutEmployeeInput = {
    jobcard?: JobcardUpdateOneRequiredWithoutAllocated_jobsNestedInput
  }

  export type AllocatedJobsUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_id?: IntFieldUpdateOperationsInput | number
  }

  export type AllocatedJobsUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_id?: IntFieldUpdateOperationsInput | number
  }

  export type CommentsUpdateWithoutEmployeeInput = {
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    joblines?: JoblinesUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    jobline_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    jobline_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehiclesCreateManyUsing_customerInput = {
    id?: number
    vrm: string
    vin: string
    make: string
    model: string
    owning_customer_id: number
  }

  export type VehiclesCreateManyOwning_customerInput = {
    id?: number
    vrm: string
    vin: string
    make: string
    model: string
    using_customer_id: number
  }

  export type VehiclesUpdateWithoutUsing_customerInput = {
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    owning_customer?: CustomerUpdateOneRequiredWithoutOwned_vehiclesNestedInput
    Jobcard?: JobcardUpdateManyWithoutVehicleNestedInput
  }

  export type VehiclesUncheckedUpdateWithoutUsing_customerInput = {
    id?: IntFieldUpdateOperationsInput | number
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    owning_customer_id?: IntFieldUpdateOperationsInput | number
    Jobcard?: JobcardUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type VehiclesUncheckedUpdateManyWithoutUsing_customerInput = {
    id?: IntFieldUpdateOperationsInput | number
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    owning_customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type VehiclesUpdateWithoutOwning_customerInput = {
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    using_customer?: CustomerUpdateOneRequiredWithoutUsing_vehiclesNestedInput
    Jobcard?: JobcardUpdateManyWithoutVehicleNestedInput
  }

  export type VehiclesUncheckedUpdateWithoutOwning_customerInput = {
    id?: IntFieldUpdateOperationsInput | number
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    using_customer_id?: IntFieldUpdateOperationsInput | number
    Jobcard?: JobcardUncheckedUpdateManyWithoutVehicleNestedInput
  }

  export type VehiclesUncheckedUpdateManyWithoutOwning_customerInput = {
    id?: IntFieldUpdateOperationsInput | number
    vrm?: StringFieldUpdateOperationsInput | string
    vin?: StringFieldUpdateOperationsInput | string
    make?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    using_customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type JobcardCreateManyVehicleInput = {
    id?: number
    jobcard_number: number
  }

  export type JobcardUpdateWithoutVehicleInput = {
    jobcard_number?: IntFieldUpdateOperationsInput | number
    joblines?: JoblinesUpdateManyWithoutJobcard_numberNestedInput
    allocated_jobs?: AllocatedJobsUpdateManyWithoutJobcardNestedInput
  }

  export type JobcardUncheckedUpdateWithoutVehicleInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_number?: IntFieldUpdateOperationsInput | number
    joblines?: JoblinesUncheckedUpdateManyWithoutJobcard_numberNestedInput
    allocated_jobs?: AllocatedJobsUncheckedUpdateManyWithoutJobcardNestedInput
  }

  export type JobcardUncheckedUpdateManyWithoutVehicleInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobcard_number?: IntFieldUpdateOperationsInput | number
  }

  export type JoblinesCreateManyJobcard_numberInput = {
    id?: number
    description: string
    time_allocated: number
  }

  export type AllocatedJobsCreateManyJobcardInput = {
    id?: number
    employee_id: number
  }

  export type JoblinesUpdateWithoutJobcard_numberInput = {
    description?: StringFieldUpdateOperationsInput | string
    time_allocated?: FloatFieldUpdateOperationsInput | number
    comments?: CommentsUpdateManyWithoutJoblinesNestedInput
  }

  export type JoblinesUncheckedUpdateWithoutJobcard_numberInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    time_allocated?: FloatFieldUpdateOperationsInput | number
    comments?: CommentsUncheckedUpdateManyWithoutJoblinesNestedInput
  }

  export type JoblinesUncheckedUpdateManyWithoutJobcard_numberInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    time_allocated?: FloatFieldUpdateOperationsInput | number
  }

  export type AllocatedJobsUpdateWithoutJobcardInput = {
    employee?: EmployeeUpdateOneRequiredWithoutAllocated_jobsNestedInput
  }

  export type AllocatedJobsUncheckedUpdateWithoutJobcardInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: IntFieldUpdateOperationsInput | number
  }

  export type AllocatedJobsUncheckedUpdateManyWithoutJobcardInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: IntFieldUpdateOperationsInput | number
  }

  export type CommentsCreateManyJoblinesInput = {
    id?: number
    type: $Enums.CommentType
    comment: string
    created_at: Date | string
    employee_id: number
  }

  export type CommentsUpdateWithoutJoblinesInput = {
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateWithoutJoblinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_id?: IntFieldUpdateOperationsInput | number
  }

  export type CommentsUncheckedUpdateManyWithoutJoblinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumCommentTypeFieldUpdateOperationsInput | $Enums.CommentType
    comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EmployeeCountOutputTypeDefaultArgs instead
     */
    export type EmployeeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehiclesCountOutputTypeDefaultArgs instead
     */
    export type VehiclesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehiclesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobcardCountOutputTypeDefaultArgs instead
     */
    export type JobcardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobcardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JoblinesCountOutputTypeDefaultArgs instead
     */
    export type JoblinesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JoblinesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeDefaultArgs instead
     */
    export type EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDefaultArgs instead
     */
    export type CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VehiclesDefaultArgs instead
     */
    export type VehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VehiclesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobcardDefaultArgs instead
     */
    export type JobcardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobcardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JoblinesDefaultArgs instead
     */
    export type JoblinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JoblinesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllocatedJobsDefaultArgs instead
     */
    export type AllocatedJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllocatedJobsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentsDefaultArgs instead
     */
    export type CommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}